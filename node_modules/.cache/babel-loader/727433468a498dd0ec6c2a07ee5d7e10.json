{"ast":null,"code":"var _jsxFileName = \"/Users/admin/full-version/src/views/apps/calendar/Calendar.js\",\n  _s = $RefreshSig$();\n// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react';\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\n// ** Third Party Components\nimport toast from 'react-hot-toast';\nimport { Menu } from 'react-feather';\nimport { Card, CardBody } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = props => {\n  _s();\n  // ** Refs\n  const calendarRef = useRef(null);\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props;\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi());\n    }\n  }, [calendarApi]);\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n    eventClassNames(_ref) {\n      let {\n        event: calendarEvent\n      } = _ref;\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar];\n      return [\n      // Background Color\n      `bg-light-${colorName}`];\n    },\n    eventClick(_ref2) {\n      let {\n        event: clickedEvent\n      } = _ref2;\n      dispatch(selectEvent(clickedEvent));\n      handleAddEventSidebar();\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: /*#__PURE__*/_jsxDEV(Menu, {\n          className: \"d-xl-none d-block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this),\n        click() {\n          toggleSidebar(true);\n        }\n      }\n    },\n    dateClick(info) {\n      const ev = blankEvent;\n      ev.start = info.date;\n      ev.end = info.date;\n      dispatch(selectEvent(ev));\n      handleAddEventSidebar();\n    },\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop(_ref3) {\n      let {\n        event: droppedEvent\n      } = _ref3;\n      dispatch(updateEvent(droppedEvent));\n      toast.success('Event Updated');\n    },\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize(_ref4) {\n      let {\n        event: resizedEvent\n      } = _ref4;\n      dispatch(updateEvent(resizedEvent));\n      toast.success('Event Updated');\n    },\n    ref: calendarRef,\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"shadow-none border-0 mb-0 rounded-0\",\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"pb-0\",\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n        ...calendarOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"HuswXQNKgAj2xlMza6JPwM9t0kA=\");\n_c = Calendar;\nexport default _c2 = /*#__PURE__*/memo(Calendar);\nvar _c, _c2;\n$RefreshReg$(_c, \"Calendar\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["useEffect","useRef","memo","Fragment","FullCalendar","listPlugin","dayGridPlugin","timeGridPlugin","interactionPlugin","toast","Menu","Card","CardBody","Calendar","props","calendarRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","current","getApi","calendarOptions","events","length","plugins","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","event","calendarEvent","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","success","eventResize","resizedEvent","ref","direction"],"sources":["/Users/admin/full-version/src/views/apps/calendar/Calendar.js"],"sourcesContent":["// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { Menu } from 'react-feather'\nimport { Card, CardBody } from 'reactstrap'\n\nconst Calendar = props => {\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi())\n    }\n  }, [calendarApi])\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({ event: calendarEvent }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\n\n      return [\n        // Background Color\n        `bg-light-${colorName}`\n      ]\n    },\n\n    eventClick({ event: clickedEvent }) {\n      dispatch(selectEvent(clickedEvent))\n      handleAddEventSidebar()\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      dispatch(updateEvent(droppedEvent))\n      toast.success('Event Updated')\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success('Event Updated')\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}