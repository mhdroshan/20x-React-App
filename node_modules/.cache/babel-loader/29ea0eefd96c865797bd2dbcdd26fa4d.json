{"ast":null,"code":"import mock from '../mock';\nconst data = {\n  orders_bar_chart: {\n    title: 'Orders',\n    statistics: '2,76k',\n    series: [{\n      name: '2020',\n      data: [45, 85, 65, 45, 65]\n    }]\n  },\n  profit_line_chart: {\n    title: 'Profit',\n    statistics: '6,24k',\n    series: [{\n      data: [0, 20, 5, 30, 15, 45]\n    }]\n  },\n  subscribers_gained: {\n    series: [{\n      name: 'Subscribers',\n      data: [28, 40, 36, 52, 38, 60, 55]\n    }],\n    analyticsData: {\n      subscribers: 92600\n    }\n  },\n  revenueGenerated: {\n    series: [{\n      name: 'Revenue',\n      data: [350, 275, 400, 300, 350, 300, 450]\n    }],\n    analyticsData: {\n      revenue: 97500\n    }\n  },\n  quarterlySales: {\n    series: [{\n      name: 'Sales',\n      data: [10, 15, 7, 12, 3, 16]\n    }],\n    analyticsData: {\n      sales: '36%'\n    }\n  },\n  ordersRecevied: {\n    series: [{\n      name: 'Orders',\n      data: [10, 15, 8, 15, 7, 12, 8]\n    }],\n    analyticsData: {\n      orders: 97500\n    }\n  },\n  siteTraffic: {\n    series: [{\n      name: 'Traffic Rate',\n      data: [150, 200, 125, 225, 200, 250]\n    }]\n  },\n  activeUsers: {\n    series: [{\n      name: 'Active Users',\n      data: [750, 1000, 900, 1250, 1000, 1200, 1100]\n    }]\n  },\n  newsletter: {\n    series: [{\n      name: 'Newsletter',\n      data: [365, 390, 365, 400, 375, 400]\n    }]\n  }\n};\nmock.onGet('/card/card-statistics/orders-bar-chart').reply(() => [200, data.orders_bar_chart]);\nmock.onGet('/card/card-statistics/profit-line-chart').reply(() => [200, data.profit_line_chart]);\nmock.onGet('/card/card-statistics/subscribers').reply(() => [200, data.subscribers_gained]);\nmock.onGet('/card/card-statistics/revenue').reply(() => [200, data.revenueGenerated]);\nmock.onGet('/card/card-statistics/sales').reply(() => [200, data.quarterlySales]);\nmock.onGet('/card/card-statistics/orders').reply(() => [200, data.ordersRecevied]);\nmock.onGet('/card/card-statistics/site-traffic').reply(() => [200, data.siteTraffic]);\nmock.onGet('/card/card-statistics/active-users').reply(() => [200, data.activeUsers]);\nmock.onGet('/card/card-statistics/newsletter').reply(() => [200, data.newsletter]);","map":{"version":3,"names":["mock","data","orders_bar_chart","title","statistics","series","name","profit_line_chart","subscribers_gained","analyticsData","subscribers","revenueGenerated","revenue","quarterlySales","sales","ordersRecevied","orders","siteTraffic","activeUsers","newsletter","onGet","reply"],"sources":["/Users/admin/full-version/src/@fake-db/cards/card-statistics.js"],"sourcesContent":["import mock from '../mock'\n\nconst data = {\n  orders_bar_chart: {\n    title: 'Orders',\n    statistics: '2,76k',\n    series: [\n      {\n        name: '2020',\n        data: [45, 85, 65, 45, 65]\n      }\n    ]\n  },\n  profit_line_chart: {\n    title: 'Profit',\n    statistics: '6,24k',\n    series: [\n      {\n        data: [0, 20, 5, 30, 15, 45]\n      }\n    ]\n  },\n  subscribers_gained: {\n    series: [\n      {\n        name: 'Subscribers',\n        data: [28, 40, 36, 52, 38, 60, 55]\n      }\n    ],\n    analyticsData: {\n      subscribers: 92600\n    }\n  },\n  revenueGenerated: {\n    series: [\n      {\n        name: 'Revenue',\n        data: [350, 275, 400, 300, 350, 300, 450]\n      }\n    ],\n    analyticsData: {\n      revenue: 97500\n    }\n  },\n  quarterlySales: {\n    series: [\n      {\n        name: 'Sales',\n        data: [10, 15, 7, 12, 3, 16]\n      }\n    ],\n    analyticsData: {\n      sales: '36%'\n    }\n  },\n  ordersRecevied: {\n    series: [\n      {\n        name: 'Orders',\n        data: [10, 15, 8, 15, 7, 12, 8]\n      }\n    ],\n    analyticsData: {\n      orders: 97500\n    }\n  },\n  siteTraffic: {\n    series: [\n      {\n        name: 'Traffic Rate',\n        data: [150, 200, 125, 225, 200, 250]\n      }\n    ]\n  },\n  activeUsers: {\n    series: [\n      {\n        name: 'Active Users',\n        data: [750, 1000, 900, 1250, 1000, 1200, 1100]\n      }\n    ]\n  },\n  newsletter: {\n    series: [\n      {\n        name: 'Newsletter',\n        data: [365, 390, 365, 400, 375, 400]\n      }\n    ]\n  }\n}\n\nmock.onGet('/card/card-statistics/orders-bar-chart').reply(() => [200, data.orders_bar_chart])\n\nmock.onGet('/card/card-statistics/profit-line-chart').reply(() => [200, data.profit_line_chart])\n\nmock.onGet('/card/card-statistics/subscribers').reply(() => [200, data.subscribers_gained])\n\nmock.onGet('/card/card-statistics/revenue').reply(() => [200, data.revenueGenerated])\n\nmock.onGet('/card/card-statistics/sales').reply(() => [200, data.quarterlySales])\n\nmock.onGet('/card/card-statistics/orders').reply(() => [200, data.ordersRecevied])\n\nmock.onGet('/card/card-statistics/site-traffic').reply(() => [200, data.siteTraffic])\n\nmock.onGet('/card/card-statistics/active-users').reply(() => [200, data.activeUsers])\n\nmock.onGet('/card/card-statistics/newsletter').reply(() => [200, data.newsletter])\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}