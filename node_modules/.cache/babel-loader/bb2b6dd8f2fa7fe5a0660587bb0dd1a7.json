{"ast":null,"code":"import axios from 'axios';\nimport jwtDefaultConfig from './jwtDefaultConfig';\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n\n  // ** For Refreshing Token\n\n  // ** For Refreshing Token\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = {\n      ...jwtDefaultConfig\n    };\n    this.isAlreadyFetchingAccessToken = false;\n    this.subscribers = [];\n    this.jwtConfig = {\n      ...this.jwtConfig,\n      ...jwtOverrideConfig\n    };\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(config => {\n      // ** Get token from localStorage\n      const accessToken = this.getToken();\n\n      // ** If token is present add it to request's Authorization Header\n      if (accessToken) {\n        // ** eslint-disable-next-line no-param-reassign\n        config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(response => response, error => {\n      // ** const { config, response: { status } } = error\n      const {\n        config,\n        response\n      } = error;\n      const originalRequest = config;\n\n      // ** if (status === 401) {\n      if (response && response.status === 401) {\n        if (!this.isAlreadyFetchingAccessToken) {\n          this.isAlreadyFetchingAccessToken = true;\n          this.refreshToken().then(r => {\n            this.isAlreadyFetchingAccessToken = false;\n\n            // ** Update accessToken in localStorage\n            this.setToken(r.data.accessToken);\n            this.setRefreshToken(r.data.refreshToken);\n            this.onAccessTokenFetched(r.data.accessToken);\n          });\n        }\n        const retryOriginalRequest = new Promise(resolve => {\n          this.addSubscriber(accessToken => {\n            // ** Make sure to assign accessToken according to your response.\n            // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n            // ** Change Authorization header\n            originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`;\n            resolve(this.axios(originalRequest));\n          });\n        });\n        return retryOriginalRequest;\n      }\n      return Promise.reject(error);\n    });\n  }\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken));\n  }\n  addSubscriber(callback) {\n    this.subscribers.push(callback);\n  }\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName);\n  }\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName);\n  }\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value);\n  }\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value);\n  }\n  login() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return axios.post(this.jwtConfig.loginEndpoint, ...args);\n  }\n  register() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return axios.post(this.jwtConfig.registerEndpoint, ...args);\n  }\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    });\n  }\n}","map":{"version":3,"names":["axios","jwtDefaultConfig","JwtService","constructor","jwtOverrideConfig","jwtConfig","isAlreadyFetchingAccessToken","subscribers","interceptors","request","use","config","accessToken","getToken","headers","Authorization","tokenType","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","retryOriginalRequest","resolve","addSubscriber","filter","callback","push","localStorage","getItem","storageTokenKeyName","getRefreshToken","storageRefreshTokenKeyName","value","setItem","login","args","post","loginEndpoint","register","registerEndpoint","refreshEndpoint"],"sources":["/Users/admin/full-version/src/@core/auth/jwt/jwtService.js"],"sourcesContent":["import axios from 'axios'\nimport jwtDefaultConfig from './jwtDefaultConfig'\n\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  jwtConfig = { ...jwtDefaultConfig }\n\n  // ** For Refreshing Token\n  isAlreadyFetchingAccessToken = false\n\n  // ** For Refreshing Token\n  subscribers = []\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(\n      config => {\n        // ** Get token from localStorage\n        const accessToken = this.getToken()\n\n        // ** If token is present add it to request's Authorization Header\n        if (accessToken) {\n          // ** eslint-disable-next-line no-param-reassign\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        // ** const { config, response: { status } } = error\n        const { config, response } = error\n        const originalRequest = config\n\n        // ** if (status === 401) {\n        if (response && response.status === 401) {\n          if (!this.isAlreadyFetchingAccessToken) {\n            this.isAlreadyFetchingAccessToken = true\n            this.refreshToken().then(r => {\n              this.isAlreadyFetchingAccessToken = false\n\n              // ** Update accessToken in localStorage\n              this.setToken(r.data.accessToken)\n              this.setRefreshToken(r.data.refreshToken)\n\n              this.onAccessTokenFetched(r.data.accessToken)\n            })\n          }\n          const retryOriginalRequest = new Promise(resolve => {\n            this.addSubscriber(accessToken => {\n              // ** Make sure to assign accessToken according to your response.\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n              // ** Change Authorization header\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n              resolve(this.axios(originalRequest))\n            })\n          })\n          return retryOriginalRequest\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback)\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\n  }\n\n  login(...args) {\n    return axios.post(this.jwtConfig.loginEndpoint, ...args)\n  }\n\n  register(...args) {\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}