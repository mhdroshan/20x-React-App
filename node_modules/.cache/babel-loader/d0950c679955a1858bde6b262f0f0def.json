{"ast":null,"code":"function t(t, r) {\n  for (var n = 0; n < r.length; n++) {\n    var i = r[n];\n    i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n  }\n}\nfunction r() {\n  return (r = Object.assign || function (t) {\n    for (var r = 1; r < arguments.length; r++) {\n      var n = arguments[r];\n      for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nfunction n(t, r) {\n  t.prototype = Object.create(r.prototype), t.prototype.constructor = t, t.__proto__ = r;\n}\nvar i = function () {\n    function r(t, r) {\n      this.operator = t, this.value = r, Object.defineProperty(this, \"t\", {\n        writable: !0\n      });\n    }\n    var n, i, e;\n    return r.prototype.addNote = function (t) {\n      this.t = this.t || [], this.t.push(t);\n    }, n = r, (i = [{\n      key: \"notes\",\n      get: function () {\n        return this.t;\n      }\n    }]) && t(n.prototype, i), e && t(n, e), r;\n  }(),\n  e = function (t) {\n    function r() {\n      return t.apply(this, arguments) || this;\n    }\n    return n(r, t), r;\n  }(i),\n  o = function (t) {\n    function r(r, n) {\n      if (!Array.isArray(n)) throw new Error('\"' + r + '\" operator expects to receive an array of conditions');\n      return t.call(this, r, n) || this;\n    }\n    return n(r, t), r;\n  }(e),\n  u = \"__itself__\",\n  f = function (t) {\n    function r(r, n, i) {\n      var e;\n      return (e = t.call(this, r, i) || this).field = n, e;\n    }\n    return n(r, t), r;\n  }(i),\n  a = new e(\"__null__\", null),\n  c = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\nfunction s(t, r) {\n  return r instanceof o && r.operator === t;\n}\nfunction h(t, r) {\n  return 1 === r.length ? r[0] : new o(t, function t(r, n, i) {\n    for (var e = i || [], o = 0, u = n.length; o < u; o++) {\n      var f = n[o];\n      s(r, f) ? t(r, f.value, e) : e.push(f);\n    }\n    return e;\n  }(t, r));\n}\nvar v = function (t) {\n    return t;\n  },\n  d = function () {\n    return Object.create(null);\n  },\n  l = Object.defineProperty(d(), \"__@type@__\", {\n    value: \"ignore value\"\n  });\nfunction p(t, r, n) {\n  if (void 0 === n && (n = !1), !t || t && t.constructor !== Object) return !1;\n  for (var i in t) {\n    if (c(t, i) && c(r, i) && (!n || t[i] !== l)) return !0;\n  }\n  return !1;\n}\nfunction w(t) {\n  var r = [];\n  for (var n in t) c(t, n) && t[n] !== l && r.push(n);\n  return r;\n}\nfunction b(t, r) {\n  r !== a && t.push(r);\n}\nvar y = function (t) {\n    return h(\"and\", t);\n  },\n  O = function (t) {\n    return h(\"or\", t);\n  },\n  j = {\n    compound: function (t, r, n) {\n      var i = (Array.isArray(r) ? r : [r]).map(function (t) {\n        return n.parse(t);\n      });\n      return new o(t.name, i);\n    },\n    field: function (t, r, n) {\n      return new f(t.name, n.field, r);\n    },\n    document: function (t, r) {\n      return new e(t.name, r);\n    }\n  },\n  _ = function () {\n    function t(t, n) {\n      var i = this;\n      void 0 === n && (n = d()), this.i = void 0, this.o = void 0, this.u = void 0, this.s = void 0, this.h = void 0, this.parse = this.parse.bind(this), this.s = {\n        operatorToConditionName: n.operatorToConditionName || v,\n        defaultOperatorName: n.defaultOperatorName || \"eq\",\n        mergeFinalConditions: n.mergeFinalConditions || y\n      }, this.i = Object.keys(t).reduce(function (n, e) {\n        return n[e] = r({\n          name: i.s.operatorToConditionName(e)\n        }, t[e]), n;\n      }, {}), this.o = r({}, n.fieldContext, {\n        field: \"\",\n        query: {},\n        parse: this.parse,\n        hasOperators: function (t) {\n          return p(t, i.i, n.useIgnoreValue);\n        }\n      }), this.u = r({}, n.documentContext, {\n        parse: this.parse,\n        query: {}\n      }), this.h = n.useIgnoreValue ? w : Object.keys;\n    }\n    var n = t.prototype;\n    return n.setParse = function (t) {\n      this.parse = t, this.o.parse = t, this.u.parse = t;\n    }, n.parseField = function (t, r, n, i) {\n      var e = this.i[r];\n      if (!e) throw new Error('Unsupported operator \"' + r + '\"');\n      if (\"field\" !== e.type) throw new Error(\"Unexpected \" + e.type + ' operator \"' + r + '\" at field level');\n      return this.o.field = t, this.o.query = i, this.parseInstruction(e, n, this.o);\n    }, n.parseInstruction = function (t, r, n) {\n      return \"function\" == typeof t.validate && t.validate(t, r), (t.parse || j[t.type])(t, r, n);\n    }, n.parseFieldOperators = function (t, r) {\n      for (var n = [], i = this.h(r), e = 0, o = i.length; e < o; e++) {\n        var u = i[e];\n        if (!this.i[u]) throw new Error('Field query for \"' + t + '\" may contain only operators or a plain object as a value');\n        b(n, this.parseField(t, u, r[u], r));\n      }\n      return n;\n    }, n.parse = function (t) {\n      var r = [],\n        n = this.h(t);\n      this.u.query = t;\n      for (var i = 0, e = n.length; i < e; i++) {\n        var o = n[i],\n          u = t[o],\n          f = this.i[o];\n        if (f) {\n          if (\"document\" !== f.type && \"compound\" !== f.type) throw new Error('Cannot use parsing instruction for operator \"' + o + '\" in \"document\" context as it is supposed to be used in  \"' + f.type + '\" context');\n          b(r, this.parseInstruction(f, u, this.u));\n        } else this.o.hasOperators(u) ? r.push.apply(r, this.parseFieldOperators(o, u)) : b(r, this.parseField(o, this.s.defaultOperatorName, u, t));\n      }\n      return this.s.mergeFinalConditions(r);\n    }, t;\n  }();\nfunction m(t, r) {\n  var n = t[r];\n  if (\"function\" != typeof n) throw new Error('Unable to interpret \"' + r + '\" condition. Did you forget to register interpreter for it?');\n  return n;\n}\nfunction g(t) {\n  return t.operator;\n}\nfunction E(t, n) {\n  var i,\n    e = n,\n    o = e && e.getInterpreterName || g;\n  switch (e ? e.numberOfArguments : 0) {\n    case 1:\n      i = function (r) {\n        var n = o(r, e);\n        return m(t, n)(r, u);\n      };\n      break;\n    case 3:\n      i = function (r, n, i) {\n        var f = o(r, e);\n        return m(t, f)(r, n, i, u);\n      };\n      break;\n    default:\n      i = function (r, n) {\n        var i = o(r, e);\n        return m(t, i)(r, n, u);\n      };\n  }\n  var u = r({}, e, {\n    interpret: i\n  });\n  return u.interpret;\n}\nfunction x(t, r) {\n  return function (n) {\n    for (var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), o = 1; o < i; o++) e[o - 1] = arguments[o];\n    var u = t.apply(void 0, [n].concat(e)),\n      f = r.bind(null, u);\n    return f.ast = u, f;\n  };\n}\nvar q = _.prototype.parseInstruction;\nexport { o as CompoundCondition, i as Condition, e as DocumentCondition, f as FieldCondition, u as ITSELF, a as NULL_CONDITION, _ as ObjectQueryParser, y as buildAnd, O as buildOr, E as createInterpreter, x as createTranslatorFactory, j as defaultInstructionParsers, p as hasOperators, v as identity, l as ignoreValue, s as isCompound, d as object, h as optimizedCompoundCondition, q as parseInstruction };","map":{"version":3,"mappings":"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","names":["Condition","operator","value","Object","defineProperty","this","writable","addNote","note","_notes","push","DocumentCondition","CompoundCondition","conditions","Array","isArray","Error","_DocumentCondition","ITSELF","FieldCondition","field","NULL_CONDITION","hasOwnProperty","prototype","call","bind","isCompound","condition","optimizedCompoundCondition","length","flattenConditions","aggregatedResult","flatConditions","i","currentNode","identity","x","object","create","ignoreValue","hasOperators","instructions","skipIgnore","constructor","prop","objectKeysSkipIgnore","anyObject","keys","key","pushIfNonNullCondition","buildAnd","buildOr","defaultInstructionParsers","compound","instruction","context","map","query","parse","name","document","ObjectQueryParser","options","_instructions","_fieldInstructionContext","_documentInstructionContext","_options","_objectKeys","operatorToConditionName","defaultOperatorName","mergeFinalConditions","reduce","all","_this","fieldContext","useIgnoreValue","documentContext","setParse","parseField","parentQuery","type","parseInstruction","validate","parseFieldOperators","op","getInterpreter","interpreters","interpret","defaultInterpreterName","createInterpreter","rawOptions","getInterpreterName","numberOfArguments","interpreterName","interpretOperator","defaultContext","params","createTranslatorFactory","args","ast","translate"],"sources":["../../src/Condition.ts","../../src/utils.ts","../../src/builder.ts","../../src/parsers/defaultInstructionParsers.ts","../../src/parsers/ObjectQueryParser.ts","../../src/interpreter.ts","../../src/translator.ts","../../src/index.ts"],"sourcesContent":["export interface Note<T> {\n  type: string\n  message?: string\n  originalValue?: T\n}\n\nexport abstract class Condition<T = unknown> {\n  private _notes!: Note<T>[];\n\n  constructor(\n    public readonly operator: string,\n    public readonly value: T\n  ) {\n    Object.defineProperty(this, '_notes', {\n      writable: true\n    });\n  }\n\n  get notes(): ReadonlyArray<Note<T>> | undefined {\n    return this._notes;\n  }\n\n  addNote(note: Note<T>) {\n    this._notes = this._notes || [];\n    this._notes.push(note);\n  }\n}\n\nexport class DocumentCondition<T> extends Condition<T> {\n}\n\nexport class CompoundCondition<T extends Condition = Condition> extends DocumentCondition<T[]> {\n  constructor(operator: string, conditions: T[]) {\n    if (!Array.isArray(conditions)) {\n      throw new Error(`\"${operator}\" operator expects to receive an array of conditions`);\n    }\n\n    super(operator, conditions);\n  }\n}\n\nexport const ITSELF = '__itself__';\nexport class FieldCondition<T = unknown> extends Condition<T> {\n  public readonly field!: string | typeof ITSELF;\n\n  constructor(operator: string, field: string | typeof ITSELF, value: T) {\n    super(operator, value);\n    this.field = field;\n  }\n}\n\nexport const NULL_CONDITION = new DocumentCondition('__null__', null);\nexport type ConditionValue<T> = T extends Condition<infer V> ? V : unknown;\n","import { Condition, CompoundCondition, NULL_CONDITION } from './Condition';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\n\nexport function isCompound(operator: string, condition: Condition): condition is CompoundCondition {\n  return condition instanceof CompoundCondition && condition.operator === operator;\n}\n\nfunction flattenConditions<T extends Condition>(\n  operator: string,\n  conditions: T[],\n  aggregatedResult?: T[]\n) {\n  const flatConditions: T[] = aggregatedResult || [];\n\n  for (let i = 0, length = conditions.length; i < length; i++) {\n    const currentNode = conditions[i];\n\n    if (isCompound(operator, currentNode)) {\n      flattenConditions(operator, currentNode.value as T[], flatConditions);\n    } else {\n      flatConditions.push(currentNode);\n    }\n  }\n\n  return flatConditions;\n}\n\nexport function optimizedCompoundCondition<T extends Condition>(operator: string, conditions: T[]) {\n  if (conditions.length === 1) {\n    return conditions[0];\n  }\n\n  return new CompoundCondition(operator, flattenConditions(operator, conditions));\n}\n\nexport const identity = <T>(x: T) => x;\nexport const object = () => Object.create(null);\n\nexport const ignoreValue: IgnoreValue = Object.defineProperty(object(), '__@type@__', {\n  value: 'ignore value'\n});\nexport interface IgnoreValue {\n  readonly ['__@type@__']: 'ignore value'\n}\n\nexport function hasOperators<T>(\n  value: any,\n  instructions: Record<string, unknown>,\n  skipIgnore = false,\n): value is T {\n  if (!value || value && value.constructor !== Object) {\n    return false;\n  }\n\n  for (const prop in value) { // eslint-disable-line no-restricted-syntax, guard-for-in\n    const hasProp = hasOwnProperty(value, prop) && hasOwnProperty(instructions, prop);\n    if (hasProp && (!skipIgnore || value[prop] !== ignoreValue)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function objectKeysSkipIgnore(anyObject: Record<string, unknown>) {\n  const keys: string[] = [];\n  for (const key in anyObject) { // eslint-disable-line no-restricted-syntax\n    if (hasOwnProperty(anyObject, key) && anyObject[key] !== ignoreValue) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n}\n\nexport function pushIfNonNullCondition(conditions: Condition[], condition: Condition) {\n  if (condition !== NULL_CONDITION) {\n    conditions.push(condition);\n  }\n}\n","import { Condition } from './Condition';\nimport { optimizedCompoundCondition } from './utils';\n\nexport const buildAnd = (conditions: Condition[]) => optimizedCompoundCondition('and', conditions);\nexport const buildOr = (conditions: Condition[]) => optimizedCompoundCondition('or', conditions);\n","import {\n  FieldCondition,\n  CompoundCondition,\n  DocumentCondition,\n} from '../Condition';\nimport {\n  DocumentInstruction,\n  CompoundInstruction,\n  FieldInstruction,\n} from '../types';\n\ninterface DefaultParsers {\n  compound: Exclude<CompoundInstruction['parse'], undefined>,\n  field: Exclude<FieldInstruction['parse'], undefined>,\n  document: Exclude<DocumentInstruction['parse'], undefined>\n}\n\nexport const defaultInstructionParsers: DefaultParsers = {\n  compound(instruction, value, context) {\n    const queries = Array.isArray(value) ? value : [value];\n    const conditions = queries.map(query => context.parse(query));\n    return new CompoundCondition(instruction.name, conditions);\n  },\n  field(instruction, value, context) {\n    return new FieldCondition(instruction.name, context.field, value);\n  },\n  document(instruction, value) {\n    return new DocumentCondition(instruction.name, value);\n  }\n};\n","import { Condition } from '../Condition';\nimport {\n  NamedInstruction,\n  ParsingInstruction,\n  FieldParsingContext,\n  ParsingContext,\n} from '../types';\nimport { buildAnd } from '../builder';\nimport { defaultInstructionParsers } from './defaultInstructionParsers';\nimport {\n  identity,\n  hasOperators,\n  object,\n  pushIfNonNullCondition,\n  objectKeysSkipIgnore,\n} from '../utils';\n\nexport type FieldQueryOperators<T extends {}> = {\n  [K in keyof T]: T[K] extends {} ? T[K] : never\n}[keyof T];\n\ntype ParsingInstructions = Record<string, NamedInstruction>;\n\nexport interface QueryOptions {\n  operatorToConditionName?(name: string): string\n  defaultOperatorName?: string\n  fieldContext?: Record<string, unknown>\n  documentContext?: Record<string, unknown>\n  useIgnoreValue?: boolean\n  mergeFinalConditions?(conditions: Condition[]): Condition\n}\n\nexport type ObjectQueryFieldParsingContext = ParsingContext<FieldParsingContext & {\n  query: {},\n  hasOperators<T>(value: unknown): value is T\n}>;\n\nexport class ObjectQueryParser<\n  T extends Record<any, any>,\n  U extends FieldQueryOperators<T> = FieldQueryOperators<T>\n> {\n  private readonly _instructions: ParsingInstructions;\n  private _fieldInstructionContext: ObjectQueryFieldParsingContext;\n  private _documentInstructionContext: ParsingContext<{ query: {} }>;\n  private readonly _options: Required<\n  Pick<QueryOptions, 'operatorToConditionName' | 'defaultOperatorName' | 'mergeFinalConditions'>\n  >;\n\n  private readonly _objectKeys: typeof Object.keys;\n\n  constructor(instructions: Record<string, ParsingInstruction>, options: QueryOptions = object()) {\n    this.parse = this.parse.bind(this);\n    this._options = {\n      operatorToConditionName: options.operatorToConditionName || identity,\n      defaultOperatorName: options.defaultOperatorName || 'eq',\n      mergeFinalConditions: options.mergeFinalConditions || buildAnd,\n    };\n    this._instructions = Object.keys(instructions).reduce((all, name) => {\n      all[name] = { name: this._options.operatorToConditionName(name), ...instructions[name] };\n      return all;\n    }, {} as ParsingInstructions);\n    this._fieldInstructionContext = {\n      ...options.fieldContext,\n      field: '',\n      query: {},\n      parse: this.parse,\n      hasOperators: <T>(value: unknown): value is T => hasOperators(\n        value,\n        this._instructions,\n        options.useIgnoreValue\n      ),\n    };\n    this._documentInstructionContext = {\n      ...options.documentContext,\n      parse: this.parse,\n      query: {}\n    };\n    this._objectKeys = options.useIgnoreValue ? objectKeysSkipIgnore : Object.keys;\n  }\n\n  setParse(parse: this['parse']) {\n    this.parse = parse;\n    this._fieldInstructionContext.parse = parse;\n    this._documentInstructionContext.parse = parse;\n  }\n\n  protected parseField(field: string, operator: string, value: unknown, parentQuery: {}) {\n    const instruction = this._instructions[operator];\n\n    if (!instruction) {\n      throw new Error(`Unsupported operator \"${operator}\"`);\n    }\n\n    if (instruction.type !== 'field') {\n      throw new Error(`Unexpected ${instruction.type} operator \"${operator}\" at field level`);\n    }\n\n    this._fieldInstructionContext.field = field;\n    this._fieldInstructionContext.query = parentQuery;\n\n    return this.parseInstruction(instruction, value, this._fieldInstructionContext);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  protected parseInstruction(\n    instruction: NamedInstruction,\n    value: unknown,\n    context: ParsingContext<{}>\n  ) {\n    if (typeof instruction.validate === 'function') {\n      instruction.validate(instruction, value);\n    }\n\n    const parse: typeof instruction.parse = instruction.parse\n      || defaultInstructionParsers[instruction.type as keyof typeof defaultInstructionParsers];\n    return parse(instruction, value, context);\n  }\n\n  protected parseFieldOperators(field: string, value: U) {\n    const conditions: Condition[] = [];\n    const keys = this._objectKeys(value);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const op = keys[i];\n      const instruction = this._instructions[op];\n\n      if (!instruction) {\n        throw new Error(`Field query for \"${field}\" may contain only operators or a plain object as a value`);\n      }\n\n      const condition = this.parseField(field, op, value[op as keyof U], value);\n      pushIfNonNullCondition(conditions, condition);\n    }\n\n    return conditions;\n  }\n\n  parse<Q extends T>(query: Q): Condition {\n    const conditions = [];\n    const keys = this._objectKeys(query);\n\n    this._documentInstructionContext.query = query;\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      const value = query[key];\n      const instruction = this._instructions[key];\n\n      if (instruction) {\n        if (instruction.type !== 'document' && instruction.type !== 'compound') {\n          throw new Error(`Cannot use parsing instruction for operator \"${key}\" in \"document\" context as it is supposed to be used in  \"${instruction.type}\" context`);\n        }\n\n        pushIfNonNullCondition(\n          conditions,\n          this.parseInstruction(instruction, value, this._documentInstructionContext)\n        );\n      } else if (this._fieldInstructionContext.hasOperators<U>(value)) {\n        conditions.push(...this.parseFieldOperators(key, value));\n      } else {\n        pushIfNonNullCondition(\n          conditions,\n          this.parseField(key, this._options.defaultOperatorName, value, query)\n        );\n      }\n    }\n\n    return this._options.mergeFinalConditions(conditions);\n  }\n}\n","import { Condition } from './Condition';\n\ntype ArgsExceptLast<F extends (...args: any[]) => any> =\n  F extends (a: any, c: any) => any\n    ? Parameters<(condition: Condition) => 0>\n    : F extends (a: any, b: any, c: any) => any\n      ? Parameters<(condition: Condition, value: Parameters<F>[1]) => 0>\n      : Parameters<(\n        condition: Condition,\n        value: Parameters<F>[1],\n        options: Parameters<F>[2],\n        ...args: unknown[]\n      ) => 0>;\n\nexport type Interpreter<T extends Condition, R> = (condition: T, ...args: any[]) => R;\nexport type AnyInterpreter = Interpreter<any, any>;\nexport interface InterpretationContext<T extends AnyInterpreter> {\n  interpret(...args: ArgsExceptLast<T>): ReturnType<T>;\n}\n\nfunction getInterpreter<T extends Record<string, AnyInterpreter>>(\n  interpreters: T,\n  operator: keyof T\n) {\n  const interpret = interpreters[operator];\n\n  if (typeof interpret !== 'function') {\n    throw new Error(`Unable to interpret \"${operator}\" condition. Did you forget to register interpreter for it?`);\n  }\n\n  return interpret;\n}\n\nexport interface InterpreterOptions {\n  numberOfArguments?: 1 | 2 | 3\n  getInterpreterName?(condition: Condition, context: this): string\n}\n\nfunction defaultInterpreterName(condition: Condition) {\n  return condition.operator;\n}\n\nexport function createInterpreter<T extends AnyInterpreter, U extends {} = {}>(\n  interpreters: Record<string, T>,\n  rawOptions?: U\n) {\n  const options = rawOptions as U & InterpreterOptions;\n  const getInterpreterName = options && options.getInterpreterName || defaultInterpreterName;\n  let interpret;\n\n  switch (options ? options.numberOfArguments : 0) {\n    case 1:\n      interpret = ((condition) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n    case 3:\n      interpret = ((condition, value, params) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, value, params, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n    default:\n      interpret = ((condition, value) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, value, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n  }\n\n  const defaultContext = {\n    ...options,\n    interpret,\n  } as InterpretationContext<T> & U;\n\n  return defaultContext.interpret;\n}\n","import { Condition } from './Condition';\nimport { Parse } from './types';\nimport { AnyInterpreter } from './interpreter';\n\ntype Bound<T> = T extends (first: Condition, ...args: infer A) => any\n  ? { (...args: A): ReturnType<T>, ast: Condition }\n  : never;\n\nexport function createTranslatorFactory<Lang, Interpreter extends AnyInterpreter>(\n  parse: Parse<Lang>,\n  interpret: Interpreter\n) {\n  return (query: Lang, ...args: unknown[]): Bound<Interpreter> => {\n    const ast = parse(query, ...args);\n    const translate = (interpret as any).bind(null, ast);\n    translate.ast = ast;\n    return translate;\n  };\n}\n","import { ObjectQueryParser } from './parsers/ObjectQueryParser';\n\nexport * from './Condition';\nexport * from './types';\nexport * from './interpreter';\nexport * from './translator';\nexport * from './builder';\nexport {\n  isCompound,\n  hasOperators,\n  identity,\n  object,\n  optimizedCompoundCondition,\n  ignoreValue,\n} from './utils';\nexport type {\n  IgnoreValue\n} from './utils';\nexport * from './parsers/ObjectQueryParser';\nexport * from './parsers/defaultInstructionParsers';\n/**\n * @deprecated use `ObjectQueryParser#parseInstruction` instead\n * TODO(major): remove\n */\nexport const parseInstruction = (ObjectQueryParser.prototype as any).parseInstruction;\n"]},"metadata":{},"sourceType":"module"}