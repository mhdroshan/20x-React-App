{"ast":null,"code":"var e = g(require(\"tiny-invariant\")),\n  t = require(\"react\"),\n  n = t.Children,\n  r = t.cloneElement,\n  o = t.Component,\n  i = t.createElement,\n  l = t.createRef,\n  a = g(require(\"classnames\")),\n  c = require(\"sortablejs\"),\n  s = g(c);\nexports.Sortable = s;\nvar u = c.Direction;\nexports.Direction = u;\nvar f = c.DOMRect;\nexports.DOMRect = f;\nvar p = c.GroupOptions;\nexports.GroupOptions = p;\nvar d = c.MoveEvent;\nexports.MoveEvent = d;\nvar b = c.Options;\nexports.Options = b;\nvar y = c.PullResult;\nexports.PullResult = y;\nvar v = c.PutResult;\nexports.PutResult = v;\nvar h = c.SortableEvent;\nexports.SortableEvent = h;\nvar m = c.SortableOptions;\nexports.SortableOptions = m;\nvar O = c.Utils;\nfunction g(e) {\n  return e && e.__esModule ? e.default : e;\n}\nfunction w(e, t) {\n  if (null == e) return {};\n  var n,\n    r,\n    o = function (e, t) {\n      if (null == e) return {};\n      var n,\n        r,\n        o = {},\n        i = Object.keys(e);\n      for (r = 0; r < i.length; r++) n = i[r], t.indexOf(n) >= 0 || (o[n] = e[n]);\n      return o;\n    }(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var i = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < i.length; r++) n = i[r], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (o[n] = e[n]);\n  }\n  return o;\n}\nfunction S(e) {\n  return function (e) {\n    if (Array.isArray(e)) return j(e);\n  }(e) || function (e) {\n    if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);\n  }(e) || function (e, t) {\n    if (!e) return;\n    if (\"string\" == typeof e) return j(e, t);\n    var n = Object.prototype.toString.call(e).slice(8, -1);\n    \"Object\" === n && e.constructor && (n = e.constructor.name);\n    if (\"Map\" === n || \"Set\" === n) return Array.from(e);\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return j(e, t);\n  }(e) || function () {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }();\n}\nfunction j(e, t) {\n  (null == t || t > e.length) && (t = e.length);\n  for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];\n  return r;\n}\nfunction x(e, t) {\n  var n = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var r = Object.getOwnPropertySymbols(e);\n    t && (r = r.filter(function (t) {\n      return Object.getOwnPropertyDescriptor(e, t).enumerable;\n    })), n.push.apply(n, r);\n  }\n  return n;\n}\nfunction I(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var n = null != arguments[t] ? arguments[t] : {};\n    t % 2 ? x(Object(n), !0).forEach(function (t) {\n      P(e, t, n[t]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : x(Object(n)).forEach(function (t) {\n      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n    });\n  }\n  return e;\n}\nfunction P(e, t, n) {\n  return t in e ? Object.defineProperty(e, t, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = n, e;\n}\nfunction E(e) {\n  null !== e.parentElement && e.parentElement.removeChild(e);\n}\nfunction k(e) {\n  e.forEach(function (e) {\n    return E(e.element);\n  });\n}\nfunction C(e) {\n  e.forEach(function (e) {\n    var t, n, r, o;\n    t = e.parentElement, n = e.element, r = e.oldIndex, o = t.children[r] || null, t.insertBefore(n, o);\n  });\n}\nfunction D(e, t) {\n  var n = M(e),\n    r = {\n      parentElement: e.from\n    },\n    o = [];\n  switch (n) {\n    case \"normal\":\n      o = [{\n        element: e.item,\n        newIndex: e.newIndex,\n        oldIndex: e.oldIndex,\n        parentElement: e.from\n      }];\n      break;\n    case \"swap\":\n      o = [I({\n        element: e.item,\n        oldIndex: e.oldIndex,\n        newIndex: e.newIndex\n      }, r), I({\n        element: e.swapItem,\n        oldIndex: e.newIndex,\n        newIndex: e.oldIndex\n      }, r)];\n      break;\n    case \"multidrag\":\n      o = e.oldIndicies.map(function (t, n) {\n        return I({\n          element: t.multiDragElement,\n          oldIndex: t.index,\n          newIndex: e.newIndicies[n].index\n        }, r);\n      });\n  }\n  return function (e, t) {\n    return e.map(function (e) {\n      return I(I({}, e), {}, {\n        item: t[e.oldIndex]\n      });\n    }).sort(function (e, t) {\n      return e.oldIndex - t.oldIndex;\n    });\n  }(o, t);\n}\nfunction A(e, t) {\n  var n = S(t);\n  return e.concat().reverse().forEach(function (e) {\n    return n.splice(e.oldIndex, 1);\n  }), n;\n}\nfunction R(e, t, n, r) {\n  var o = S(t);\n  return e.forEach(function (e) {\n    var t = r && n && r(e.item, n);\n    o.splice(e.newIndex, 0, t || e.item);\n  }), o;\n}\nfunction M(e) {\n  return e.oldIndicies && e.oldIndicies.length > 0 ? \"multidrag\" : e.swapItem ? \"swap\" : \"normal\";\n}\nfunction U(e) {\n  return (U = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n    return typeof e;\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n  })(e);\n}\nfunction L(e) {\n  return function (e) {\n    if (Array.isArray(e)) return _(e);\n  }(e) || function (e) {\n    if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);\n  }(e) || function (e, t) {\n    if (!e) return;\n    if (\"string\" == typeof e) return _(e, t);\n    var n = Object.prototype.toString.call(e).slice(8, -1);\n    \"Object\" === n && e.constructor && (n = e.constructor.name);\n    if (\"Map\" === n || \"Set\" === n) return Array.from(e);\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _(e, t);\n  }(e) || function () {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }();\n}\nfunction _(e, t) {\n  (null == t || t > e.length) && (t = e.length);\n  for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];\n  return r;\n}\nfunction H(e, t) {\n  var n = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var r = Object.getOwnPropertySymbols(e);\n    t && (r = r.filter(function (t) {\n      return Object.getOwnPropertyDescriptor(e, t).enumerable;\n    })), n.push.apply(n, r);\n  }\n  return n;\n}\nfunction N(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var n = null != arguments[t] ? arguments[t] : {};\n    t % 2 ? H(Object(n), !0).forEach(function (t) {\n      B(e, t, n[t]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : H(Object(n)).forEach(function (t) {\n      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n    });\n  }\n  return e;\n}\nfunction q(e, t) {\n  for (var n = 0; n < t.length; n++) {\n    var r = t[n];\n    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n  }\n}\nfunction T(e, t) {\n  return (T = Object.setPrototypeOf || function (e, t) {\n    return e.__proto__ = t, e;\n  })(e, t);\n}\nfunction F(e) {\n  var t = function () {\n    if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n    if (Reflect.construct.sham) return !1;\n    if (\"function\" == typeof Proxy) return !0;\n    try {\n      return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;\n    } catch (e) {\n      return !1;\n    }\n  }();\n  return function () {\n    var n,\n      r = $(e);\n    if (t) {\n      var o = $(this).constructor;\n      n = Reflect.construct(r, arguments, o);\n    } else n = r.apply(this, arguments);\n    return G(this, n);\n  };\n}\nfunction G(e, t) {\n  return !t || \"object\" !== U(t) && \"function\" != typeof t ? function (e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n  }(e) : t;\n}\nfunction $(e) {\n  return ($ = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n    return e.__proto__ || Object.getPrototypeOf(e);\n  })(e);\n}\nfunction B(e, t, n) {\n  return t in e ? Object.defineProperty(e, t, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = n, e;\n}\nexports.Utils = O;\nvar J = {\n    dragging: null\n  },\n  z = function (t) {\n    !function (e, t) {\n      if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n      e.prototype = Object.create(t && t.prototype, {\n        constructor: {\n          value: e,\n          writable: !0,\n          configurable: !0\n        }\n      }), t && T(e, t);\n    }(d, o);\n    var c,\n      u,\n      f,\n      p = F(d);\n    function d(t) {\n      var n;\n      !function (e, t) {\n        if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n      }(this, d), (n = p.call(this, t)).ref = l();\n      var r = t.list.map(function (e) {\n        return N(N({}, e), {}, {\n          chosen: !1,\n          selected: !1\n        });\n      });\n      return t.setList(r, n.sortable, J), e(!t.plugins, '\\nPlugins prop is no longer supported.\\nInstead, mount it with \"Sortable.mount(new MultiDrag())\"\\nPlease read the updated README.md at https://github.com/SortableJS/react-sortablejs.\\n      '), n;\n    }\n    return c = d, (u = [{\n      key: \"componentDidMount\",\n      value: function () {\n        if (null !== this.ref.current) {\n          var e = this.makeOptions();\n          s.create(this.ref.current, e);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function () {\n        var e = this.props,\n          t = e.tag,\n          n = {\n            style: e.style,\n            className: e.className,\n            id: e.id\n          };\n        return i(t && null !== t ? t : \"div\", N({\n          ref: this.ref\n        }, n), this.getChildren());\n      }\n    }, {\n      key: \"getChildren\",\n      value: function () {\n        var e = this.props,\n          t = e.children,\n          o = e.dataIdAttr,\n          i = e.selectedClass,\n          l = void 0 === i ? \"sortable-selected\" : i,\n          c = e.chosenClass,\n          s = void 0 === c ? \"sortable-chosen\" : c,\n          u = (e.dragClass, e.fallbackClass, e.ghostClass, e.swapClass, e.filter),\n          f = void 0 === u ? \"sortable-filter\" : u,\n          p = e.list;\n        if (!t || null == t) return null;\n        var d = o || \"data-id\";\n        return n.map(t, function (e, t) {\n          var n,\n            o,\n            i = p[t],\n            c = e.props.className,\n            u = \"string\" == typeof f && B({}, f.replace(\".\", \"\"), !!i.filtered),\n            b = a(c, N((B(n = {}, l, i.selected), B(n, s, i.chosen), n), u));\n          return r(e, (B(o = {}, d, e.key), B(o, \"className\", b), o));\n        });\n      }\n    }, {\n      key: \"makeOptions\",\n      value: function () {\n        var e,\n          t = this,\n          n = ((e = this.props).list, e.setList, e.children, e.tag, e.style, e.className, e.clone, e.onAdd, e.onChange, e.onChoose, e.onClone, e.onEnd, e.onFilter, e.onRemove, e.onSort, e.onStart, e.onUnchoose, e.onUpdate, e.onMove, e.onSpill, e.onSelect, e.onDeselect, w(e, [\"list\", \"setList\", \"children\", \"tag\", \"style\", \"className\", \"clone\", \"onAdd\", \"onChange\", \"onChoose\", \"onClone\", \"onEnd\", \"onFilter\", \"onRemove\", \"onSort\", \"onStart\", \"onUnchoose\", \"onUpdate\", \"onMove\", \"onSpill\", \"onSelect\", \"onDeselect\"]));\n        return [\"onAdd\", \"onChoose\", \"onDeselect\", \"onEnd\", \"onRemove\", \"onSelect\", \"onSpill\", \"onStart\", \"onUnchoose\", \"onUpdate\"].forEach(function (e) {\n          return n[e] = t.prepareOnHandlerPropAndDOM(e);\n        }), [\"onChange\", \"onClone\", \"onFilter\", \"onSort\"].forEach(function (e) {\n          return n[e] = t.prepareOnHandlerProp(e);\n        }), N(N({}, n), {}, {\n          onMove: function (e, n) {\n            var r = t.props.onMove,\n              o = e.willInsertAfter || -1;\n            if (!r) return o;\n            var i = r(e, n, t.sortable, J);\n            return void 0 !== i && i;\n          }\n        });\n      }\n    }, {\n      key: \"prepareOnHandlerPropAndDOM\",\n      value: function (e) {\n        var t = this;\n        return function (n) {\n          t.callOnHandlerProp(n, e), t[e](n);\n        };\n      }\n    }, {\n      key: \"prepareOnHandlerProp\",\n      value: function (e) {\n        var t = this;\n        return function (n) {\n          t.callOnHandlerProp(n, e);\n        };\n      }\n    }, {\n      key: \"callOnHandlerProp\",\n      value: function (e, t) {\n        var n = this.props[t];\n        n && n(e, this.sortable, J);\n      }\n    }, {\n      key: \"onAdd\",\n      value: function (e) {\n        var t = this.props,\n          n = t.list,\n          r = t.setList,\n          o = t.clone,\n          i = D(e, L(J.dragging.props.list));\n        k(i), r(R(i, n, e, o).map(function (e) {\n          return N(N({}, e), {}, {\n            selected: !1\n          });\n        }), this.sortable, J);\n      }\n    }, {\n      key: \"onRemove\",\n      value: function (t) {\n        var n = this,\n          r = this.props,\n          o = r.list,\n          i = r.setList,\n          l = M(t),\n          a = D(t, o);\n        C(a);\n        var c = L(o);\n        if (\"clone\" !== t.pullMode) c = A(a, c);else {\n          var s = a;\n          switch (l) {\n            case \"multidrag\":\n              s = a.map(function (e, n) {\n                return N(N({}, e), {}, {\n                  element: t.clones[n]\n                });\n              });\n              break;\n            case \"normal\":\n              s = a.map(function (e) {\n                return N(N({}, e), {}, {\n                  element: t.clone\n                });\n              });\n              break;\n            case \"swap\":\n            default:\n              e(!0, 'mode \"'.concat(l, '\" cannot clone. Please remove \"props.clone\" from <ReactSortable/> when using the \"').concat(l, '\" plugin'));\n          }\n          k(s), a.forEach(function (e) {\n            var r = e.oldIndex,\n              o = n.props.clone(e.item, t);\n            c.splice(r, 1, o);\n          });\n        }\n        i(c = c.map(function (e) {\n          return N(N({}, e), {}, {\n            selected: !1\n          });\n        }), this.sortable, J);\n      }\n    }, {\n      key: \"onUpdate\",\n      value: function (e) {\n        var t = this.props,\n          n = t.list,\n          r = t.setList,\n          o = D(e, n);\n        return k(o), C(o), r(function (e, t) {\n          return R(e, A(e, t));\n        }(o, n), this.sortable, J);\n      }\n    }, {\n      key: \"onStart\",\n      value: function () {\n        J.dragging = this;\n      }\n    }, {\n      key: \"onEnd\",\n      value: function () {\n        J.dragging = null;\n      }\n    }, {\n      key: \"onChoose\",\n      value: function (e) {\n        var t = this.props,\n          n = t.list;\n        (0, t.setList)(n.map(function (t, n) {\n          return n === e.oldIndex ? N(N({}, t), {}, {\n            chosen: !0\n          }) : t;\n        }), this.sortable, J);\n      }\n    }, {\n      key: \"onUnchoose\",\n      value: function (e) {\n        var t = this.props,\n          n = t.list;\n        (0, t.setList)(n.map(function (t, n) {\n          return n === e.oldIndex ? N(N({}, t), {}, {\n            chosen: !1\n          }) : t;\n        }), this.sortable, J);\n      }\n    }, {\n      key: \"onSpill\",\n      value: function (e) {\n        var t = this.props,\n          n = t.removeOnSpill,\n          r = t.revertOnSpill;\n        n && !r && E(e.item);\n      }\n    }, {\n      key: \"onSelect\",\n      value: function (e) {\n        var t = this.props,\n          n = t.list,\n          r = t.setList,\n          o = n.map(function (e) {\n            return N(N({}, e), {}, {\n              selected: !1\n            });\n          });\n        e.newIndicies.forEach(function (t) {\n          var n = t.index;\n          if (-1 === n) return console.log('\"'.concat(e.type, '\" had indice of \"').concat(t.index, \"\\\", which is probably -1 and doesn't usually happen here.\")), void console.log(e);\n          o[n].selected = !0;\n        }), r(o, this.sortable, J);\n      }\n    }, {\n      key: \"onDeselect\",\n      value: function (e) {\n        var t = this.props,\n          n = t.list,\n          r = t.setList,\n          o = n.map(function (e) {\n            return N(N({}, e), {}, {\n              selected: !1\n            });\n          });\n        e.newIndicies.forEach(function (e) {\n          var t = e.index;\n          -1 !== t && (o[t].selected = !0);\n        }), r(o, this.sortable, J);\n      }\n    }, {\n      key: \"sortable\",\n      get: function () {\n        var e = this.ref.current;\n        if (null === e) return null;\n        var t = Object.keys(e).find(function (e) {\n          return e.includes(\"Sortable\");\n        });\n        return t ? e[t] : null;\n      }\n    }]) && q(c.prototype, u), f && q(c, f), d;\n  }();\nexports.ReactSortable = z, B(z, \"defaultProps\", {\n  clone: function (e) {\n    return e;\n  }\n});","map":{"version":3,"mappings":"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","names":["$parcel$interopDefault","a","__esModule","default","removeNode","node","parentElement","removeChild","removeNodes","customs","forEach","curr","element","insertNodes","parent","newChild","index","refChild","oldIndex","children","insertBefore","createCustoms","evt","list","mode","getMode","from","custom","item","newIndex","$bf037e368b3040002dda64d69d3f$var$_objectSpread","swapItem","oldIndicies","map","multiDragElement","newIndicies","inputs","sort","b","createNormalized","handleStateRemove","normalized","newList","$bf037e368b3040002dda64d69d3f$var$_toConsumableArray","concat","reverse","splice","handleStateAdd","clone","newItem","length","t","B","Object","r","n","value","enumerable","configurable","writable","exports","store","dragging","ReactSortable","Component","props","_this","ref","createRef","chosen","selected","setList","sortable","invariant","plugins","this","current","newOptions","makeOptions","Sortable","create","tag","_this$props","classicProps","style","className","id","createElement","$ff006f4a88ed11a8119708ec3f19c5db$var$_objectSpread","getChildren","_this$props2","dataIdAttr","_this$props2$selected","selectedClass","_this$props2$chosenCl","chosenClass","_this$props2$filter","dragClass","fallbackClass","ghostClass","swapClass","filter","dataid","Children","child","_cloneElement","prevClassName","filtered","$ff006f4a88ed11a8119708ec3f19c5db$var$_defineProperty","replace","classNames","_objectSpread2","cloneElement","key","_this2","onAdd","onChange","onChoose","onClone","onEnd","onFilter","onRemove","onSort","onStart","onUnchoose","onUpdate","onMove","onSpill","onSelect","onDeselect","$bf037e368b3040002dda64d69d3f$var$_objectWithoutProperties","name","prepareOnHandlerPropAndDOM","prepareOnHandlerProp","originalEvt","defaultValue","willInsertAfter","result","evtName","_this3","callOnHandlerProp","_this4","propEvent","_this$props3","$bf037e368b3040002dda64d69d3f$export$createCustoms","$ff006f4a88ed11a8119708ec3f19c5db$var$_toConsumableArray","$bf037e368b3040002dda64d69d3f$export$removeNodes","$bf037e368b3040002dda64d69d3f$export$handleStateAdd","_this$props4","$bf037e368b3040002dda64d69d3f$export$getMode","$bf037e368b3040002dda64d69d3f$export$insertNodes","pullMode","$bf037e368b3040002dda64d69d3f$export$handleStateRemove","customClones","clones","_this5","_this$props5","$bf037e368b3040002dda64d69d3f$export$handleStateChanges","_this$props6","_this$props7","removeOnSpill","_this$props8","revertOnSpill","$bf037e368b3040002dda64d69d3f$export$removeNode","_this$props9","console","log","type","_this$props10","el","keys","find","k","includes"],"sources":["./home/runner/work/react-sortablejs/react-sortablejs/node_modules/@parcel/scope-hoisting/lib/helpers.js","./src/util.ts","./src/react-sortable.tsx"],"sourcesContent":[null,"import { PropsWithChildren } from \"react\";\nimport Sortable, { Options } from \"sortablejs\";\nimport { MultiDragEvent } from \"./react-sortable\";\nimport { AllMethodNames, ItemInterface, ReactSortableProps } from \"./types\";\n\n/**\n * Removes the `node` from the DOM\n * @param node\n */\nexport function removeNode(node: HTMLElement): void {\n  if (node.parentElement !== null) node.parentElement.removeChild(node);\n}\n\n/**\n * Inserts the `newChild` node at the given index in a parent\n * @param parent The parent HTML Element.\n * @param newChild A HTML eement to add as a child of the parent.\n * @param index index of the parent to place the new child in.\n */\nexport function insertNodeAt(\n  parent: HTMLElement,\n  newChild: HTMLElement,\n  index: number\n): void {\n  const refChild = parent.children[index] || null;\n  parent.insertBefore(newChild, refChild);\n}\n\n// @todo - create a dom handler function for arrays or not at all\n\n/** removes stuff from the dom in a nice order */\n// @todo - do I need parenElement?\nexport function handleDOMChanges<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  removeNodes(customs);\n  insertNodes(customs);\n}\n\nexport function removeNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => removeNode(curr.element));\n}\n\nexport function insertNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => {\n    insertNodeAt(curr.parentElement, curr.element, curr.oldIndex);\n  });\n}\n\nexport function createCustoms<T extends ItemInterface>(\n  evt: MultiDragEvent,\n  list: T[]\n): Normalized<T>[] {\n  const mode = getMode(evt);\n  const parentElement = { parentElement: evt.from };\n  let custom = [];\n  switch (mode) {\n    case \"normal\":\n      /* eslint-disable */\n      const item = {\n        element: evt.item,\n        newIndex: evt.newIndex!,\n        oldIndex: evt.oldIndex!,\n        parentElement: evt.from,\n      };\n      custom = [item];\n      break;\n    case \"swap\":\n      const drag: Input = {\n        element: evt.item,\n        oldIndex: evt.oldIndex!,\n        newIndex: evt.newIndex!,\n        ...parentElement,\n      };\n      const swap: Input = {\n        element: evt.swapItem!,\n        oldIndex: evt.newIndex!,\n        newIndex: evt.oldIndex!,\n        ...parentElement,\n      };\n      custom = [drag, swap];\n      break;\n    case \"multidrag\":\n      custom = evt.oldIndicies.map<Input>((curr, index) => ({\n        element: curr.multiDragElement,\n        oldIndex: curr.index,\n        newIndex: evt.newIndicies[index].index,\n        ...parentElement,\n      }));\n      break;\n  }\n  /* eslint-enable */\n\n  const customs = createNormalized(custom, list);\n  return customs;\n}\n\n/** moves items form old index to new index without breaking anything ideally. */\nexport function handleStateChanges<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const a = handleStateRemove(normalized, list);\n  const b = handleStateAdd(normalized, a);\n  return b;\n}\n\nexport function handleStateRemove<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const newList = [...list];\n  normalized\n    .concat()\n    .reverse()\n    .forEach((curr) => newList.splice(curr.oldIndex, 1));\n  return newList;\n}\n\nexport function handleStateAdd<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[],\n  evt?: Sortable.SortableEvent,\n  clone?: ((currentItem: T, evt: Sortable.SortableEvent) => T) | undefined\n): T[] {\n  const newList = [...list];\n  normalized.forEach((curr) => {\n    const newItem = clone && evt && clone(curr.item, evt);\n    newList.splice(curr.newIndex, 0, newItem || curr.item);\n  });\n  return newList;\n}\n\nexport function getMode(evt: MultiDragEvent): \"multidrag\" | \"swap\" | \"normal\" {\n  if (evt.oldIndicies && evt.oldIndicies.length > 0) return \"multidrag\";\n  if (evt.swapItem) return \"swap\";\n  return \"normal\";\n}\n\nexport function createNormalized<T extends ItemInterface>(\n  inputs: Input[],\n  list: T[]\n): Normalized<T>[] {\n  const normalized = inputs\n    .map<Normalized<T>>((curr) => ({ ...curr, item: list[curr.oldIndex] }))\n    .sort((a, b) => a.oldIndex - b.oldIndex);\n  return normalized;\n}\n\nexport interface Input {\n  parentElement: HTMLElement;\n  element: HTMLElement;\n  oldIndex: number;\n  newIndex: number;\n}\n\nexport interface Normalized<T> extends Input {\n  item: T;\n}\n\n/**\n * Removes the following group of properties from `props`,\n * leaving only `Sortable.Options` without any `on` methods.\n * @param props `ReactSortable.Props`\n */\nexport function destructurePropsForOptions<T>(\n  props: PropsWithChildren<ReactSortableProps<T>>\n): Exclude<Options, AllMethodNames> {\n  /* eslint-disable */\n  const {\n    // react sortable props\n    list,\n    setList,\n    children,\n    tag,\n    style,\n    className,\n    clone,\n    // sortable options that have methods we want to overwrite\n    onAdd,\n    onChange,\n    onChoose,\n    onClone,\n    onEnd,\n    onFilter,\n    onRemove,\n    onSort,\n    onStart,\n    onUnchoose,\n    onUpdate,\n    onMove,\n    onSpill,\n    onSelect,\n    onDeselect,\n    ...options\n  } = props;\n  /* eslint-enable */\n  return options;\n}\n\n/**\n * Construct a type with the properties of T except for those in type K.\n * Including this allows for backwards compatibility with earlier versions of TS.\n */\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n","import classNames from \"classnames\";\nimport {\n  Children,\n  cloneElement,\n  Component,\n  createElement,\n  createRef,\n  ReactElement,\n  RefObject,\n} from \"react\";\nimport Sortable, { MoveEvent, Options, SortableEvent } from \"sortablejs\";\nimport invariant from \"tiny-invariant\";\nimport {\n  AllMethodsExceptMove,\n  HandledMethodNames,\n  ItemInterface,\n  ReactSortableProps,\n  Store,\n  UnHandledMethodNames,\n} from \"./types\";\nimport {\n  createCustoms,\n  destructurePropsForOptions,\n  getMode,\n  handleStateAdd,\n  handleStateChanges,\n  handleStateRemove,\n  insertNodes,\n  removeNode,\n  removeNodes,\n} from \"./util\";\n\n/** Holds a global reference for which react element is being dragged */\n// @todo - use context to manage this. How does one use 2 different providers?\nconst store: Store = { dragging: null };\n\nexport class ReactSortable<T extends ItemInterface> extends Component<\n  ReactSortableProps<T>\n> {\n  /* eslint-disable-next-line */\n  static defaultProps: Partial<ReactSortableProps<any>> = {\n    clone: (item) => item,\n  };\n\n  private ref: RefObject<HTMLElement>;\n  constructor(props: ReactSortableProps<T>) {\n    super(props);\n    // @todo forward ref this component\n    this.ref = createRef<HTMLElement>();\n\n    // make all state false because we can't change sortable unless a mouse gesture is made.\n    const newList = props.list.map((item) => ({\n      ...item,\n      chosen: false,\n      selected: false,\n    }));\n\n    props.setList(newList, this.sortable, store);\n    invariant(\n      //@ts-expect-error: Doesn't exist. Will deprecate soon.\n      !props.plugins,\n      `\nPlugins prop is no longer supported.\nInstead, mount it with \"Sortable.mount(new MultiDrag())\"\nPlease read the updated README.md at https://github.com/SortableJS/react-sortablejs.\n      `\n    );\n  }\n  componentDidMount(): void {\n    if (this.ref.current === null) return;\n    const newOptions = this.makeOptions();\n    Sortable.create(this.ref.current, newOptions);\n  }\n\n  render(): JSX.Element {\n    const { tag, style, className, id } = this.props;\n    const classicProps = { style, className, id };\n\n    // if no tag, default to a `div` element.\n    const newTag = !tag || tag === null ? \"div\" : tag;\n    return createElement(\n      newTag,\n      {\n        // @todo - find a way (perhaps with the callback) to allow AntD components to work\n        ref: this.ref,\n        ...classicProps,\n      },\n      this.getChildren()\n    );\n  }\n\n  private getChildren() {\n    const {\n      children,\n      dataIdAttr,\n      selectedClass = \"sortable-selected\",\n      chosenClass = \"sortable-chosen\",\n      /* eslint-disable */\n      dragClass = \"sortable-drag\",\n      fallbackClass = \"sortable-falback\",\n      ghostClass = \"sortable-ghost\",\n      swapClass = \"sortable-swap-highlight\",\n      /* eslint-enable */\n      filter = \"sortable-filter\",\n      list,\n    } = this.props;\n\n    // if no children, don't do anything.\n    if (!children || children == null) return null;\n    const dataid = dataIdAttr || \"data-id\";\n    /* eslint-disable-next-line */\n    return Children.map(children as ReactElement<any>[], (child, index) => {\n      const item = list[index];\n      const { className: prevClassName } = child.props;\n\n      // @todo - handle the function if avalable. I don't think anyone will be doing this soon.\n      const filtered = typeof filter === \"string\" && {\n        [filter.replace(\".\", \"\")]: !!item.filtered,\n      };\n\n      const className = classNames(prevClassName, {\n        [selectedClass]: item.selected,\n        [chosenClass]: item.chosen,\n        ...filtered,\n        // [dragClass]: true,\n        // [fallbackClass]: true,\n        // [ghostClass]: true,\n        // [swapClass]: true\n      });\n\n      return cloneElement(child, {\n        [dataid]: child.key,\n        className,\n      });\n    });\n  }\n\n  /** Appends the `sortable` property to this component */\n  private get sortable(): Sortable | null {\n    const el = this.ref.current;\n    if (el === null) return null;\n    const key = Object.keys(el).find((k) => k.includes(\"Sortable\"));\n    if (!key) return null;\n    //@ts-expect-error: fix me.\n    return el[key] as Sortable;\n  }\n\n  /** Converts all the props from `ReactSortable` into the `options` object that `Sortable.create(el, [options])` can use. */\n  makeOptions(): Options {\n    const DOMHandlers: HandledMethodNames[] = [\n      \"onAdd\",\n      \"onChoose\",\n      \"onDeselect\",\n      \"onEnd\",\n      \"onRemove\",\n      \"onSelect\",\n      \"onSpill\",\n      \"onStart\",\n      \"onUnchoose\",\n      \"onUpdate\",\n    ];\n    const NonDOMHandlers: UnHandledMethodNames[] = [\n      \"onChange\",\n      \"onClone\",\n      \"onFilter\",\n      \"onSort\",\n    ];\n    const newOptions: Options = destructurePropsForOptions(this.props);\n    DOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerPropAndDOM(name))\n    );\n    NonDOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerProp(name))\n    );\n\n    /** onMove has 2 arguments and needs to be handled seperately. */\n    const onMove = (evt: MoveEvent, originalEvt: Event) => {\n      const { onMove } = this.props;\n      const defaultValue = evt.willInsertAfter || -1;\n      if (!onMove) return defaultValue;\n      const result = onMove(evt, originalEvt, this.sortable, store);\n      if (typeof result === \"undefined\") return false;\n      return result;\n    };\n\n    return {\n      ...newOptions,\n      onMove,\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop & an `on[Handler]` ReactSortable method.  */\n  prepareOnHandlerPropAndDOM(\n    evtName: HandledMethodNames\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n      // calls state change\n      //@ts-expect-error: until @types multidrag item is in\n      this[evtName](evt);\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop */\n  prepareOnHandlerProp(\n    evtName: Exclude<AllMethodsExceptMove, HandledMethodNames>\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n    };\n  }\n\n  /** Calls the `props.on[Handler]` function */\n  callOnHandlerProp(evt: SortableEvent, evtName: AllMethodsExceptMove): void {\n    const propEvent = this.props[evtName];\n    if (propEvent) propEvent(evt, this.sortable, store);\n  }\n\n  // SORTABLE DOM HANDLING\n\n  onAdd(evt: MultiDragEvent): void {\n    const { list, setList, clone } = this.props;\n    /* eslint-disable-next-line */\n    const otherList = [...store.dragging!.props.list];\n    const customs = createCustoms(evt, otherList);\n    removeNodes(customs);\n    const newList = handleStateAdd(customs, list, evt, clone).map((item) => ({\n      ...item,\n      selected: false,\n    }));\n    setList(newList, this.sortable, store);\n  }\n\n  onRemove(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const mode = getMode(evt);\n    const customs = createCustoms(evt, list);\n    insertNodes(customs);\n\n    let newList = [...list];\n    // remove state if not in clone mode. otherwise, keep.\n    if (evt.pullMode !== \"clone\") newList = handleStateRemove(customs, newList);\n    // if clone, it doesn't really remove. instead it clones in place.\n    // @todo -\n    else {\n      // switch used to get the clone\n      let customClones = customs;\n      switch (mode) {\n        case \"multidrag\":\n          customClones = customs.map((item, index) => ({\n            ...item,\n            element: evt.clones[index],\n          }));\n          break;\n        case \"normal\":\n          customClones = customs.map((item) => ({\n            ...item,\n            element: evt.clone,\n          }));\n          break;\n        case \"swap\":\n        default: {\n          invariant(\n            true,\n            `mode \"${mode}\" cannot clone. Please remove \"props.clone\" from <ReactSortable/> when using the \"${mode}\" plugin`\n          );\n        }\n      }\n      removeNodes(customClones);\n\n      // replace selected items with cloned items\n      customs.forEach((curr) => {\n        const index = curr.oldIndex;\n        /* eslint-disable-next-line */\n        const newItem = this.props.clone!(curr.item, evt);\n        newList.splice(index, 1, newItem);\n      });\n    }\n\n    // remove item.selected from list\n    newList = newList.map((item) => ({ ...item, selected: false }));\n    setList(newList, this.sortable, store);\n  }\n\n  onUpdate(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const customs = createCustoms(evt, list);\n    removeNodes(customs);\n    insertNodes(customs);\n    const newList = handleStateChanges(customs, list);\n    return setList(newList, this.sortable, store);\n  }\n\n  onStart(): void {\n    store.dragging = this;\n  }\n\n  onEnd(): void {\n    store.dragging = null;\n  }\n\n  onChoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: true,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onUnchoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: false,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onSpill(evt: SortableEvent): void {\n    const { removeOnSpill, revertOnSpill } = this.props;\n    if (removeOnSpill && !revertOnSpill) removeNode(evt.item);\n  }\n\n  onSelect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) {\n        console.log(\n          `\"${evt.type}\" had indice of \"${curr.index}\", which is probably -1 and doesn't usually happen here.`\n        );\n        console.log(evt);\n        return;\n      }\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onDeselect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) return;\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n}\n\n// everything below this point can be removed\n// once @types has been merged. PR submited\ninterface MultiIndices {\n  multiDragElement: HTMLElement;\n  index: number;\n}\n\nexport interface MultiDragEvent extends SortableEvent {\n  // @todo - add this to @types\n  clones: HTMLElement[];\n  oldIndicies: MultiIndices[];\n  newIndicies: MultiIndices[];\n  swapItem: HTMLElement | null;\n}\n"]},"metadata":{},"sourceType":"script"}