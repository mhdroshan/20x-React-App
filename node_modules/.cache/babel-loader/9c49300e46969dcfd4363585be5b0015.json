{"ast":null,"code":"import { optimizedCompoundCondition as e, FieldCondition as t, CompoundCondition as r, ITSELF as n, NULL_CONDITION as o, buildAnd as a, ObjectQueryParser as i } from \"@ucast/core\";\nexport { defaultInstructionParsers as defaultParsers } from \"@ucast/core\";\nfunction f(e, t) {\n  if (!Array.isArray(t)) throw new Error('\"' + e.name + '\" expects value to be an array');\n}\nfunction u(e, t) {\n  if (f(e, t), !t.length) throw new Error('\"' + e.name + '\" expects to have at least one element in array');\n}\nvar c = function (e) {\n    return function (t, r) {\n      if (typeof r !== e) throw new Error('\"' + t.name + '\" expects value to be a \"' + e + '\"');\n    };\n  },\n  p = {\n    type: \"compound\",\n    validate: u,\n    parse: function (t, r, n) {\n      var o = n.parse,\n        a = r.map(function (e) {\n          return o(e);\n        });\n      return e(t.name, a);\n    }\n  },\n  s = p,\n  l = {\n    type: \"compound\",\n    validate: u\n  },\n  d = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!(t && (t instanceof RegExp || t.constructor === Object))) throw new Error('\"' + e.name + '\" expects to receive either regular expression or object of field operators');\n    },\n    parse: function (e, n, o) {\n      var a = n instanceof RegExp ? new t(\"regex\", o.field, n) : o.parse(n, o);\n      return new r(e.name, [a]);\n    }\n  },\n  v = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!t || t.constructor !== Object) throw new Error('\"' + e.name + '\" expects to receive an object with nested query or field level operators');\n    },\n    parse: function (e, r, o) {\n      var a = o.parse,\n        i = o.field,\n        f = (0, o.hasOperators)(r) ? a(r, {\n          field: n\n        }) : a(r);\n      return new t(e.name, i, f);\n    }\n  },\n  w = {\n    type: \"field\",\n    validate: c(\"number\")\n  },\n  y = {\n    type: \"field\",\n    validate: f\n  },\n  $ = y,\n  x = y,\n  h = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!Array.isArray(t) || 2 !== t.length) throw new Error('\"' + e.name + '\" expects an array with 2 numeric elements');\n    }\n  },\n  m = {\n    type: \"field\",\n    validate: c(\"boolean\")\n  },\n  g = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!(\"string\" == typeof t || \"number\" == typeof t || t instanceof Date)) throw new Error('\"' + e.name + '\" expects value to be comparable (i.e., string, number or date)');\n    }\n  },\n  b = g,\n  E = b,\n  j = b,\n  O = {\n    type: \"field\"\n  },\n  R = O,\n  _ = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!(t instanceof RegExp) && \"string\" != typeof t) throw new Error('\"' + e.name + '\" expects value to be a regular expression or a string that represents regular expression');\n    },\n    parse: function (e, r, n) {\n      var o = \"string\" == typeof r ? new RegExp(r, n.query.$options || \"\") : r;\n      return new t(e.name, n.field, o);\n    }\n  },\n  q = {\n    type: \"field\",\n    parse: function () {\n      return o;\n    }\n  },\n  A = {\n    type: \"document\",\n    validate: c(\"function\")\n  },\n  N = Object.freeze({\n    __proto__: null,\n    $and: p,\n    $or: s,\n    $nor: l,\n    $not: d,\n    $elemMatch: v,\n    $size: w,\n    $in: y,\n    $nin: $,\n    $all: x,\n    $mod: h,\n    $exists: m,\n    $gte: g,\n    $gt: b,\n    $lt: E,\n    $lte: j,\n    $eq: O,\n    $ne: R,\n    $regex: _,\n    $options: q,\n    $where: A\n  });\nvar P = function (e) {\n    var t, r;\n    function n(t) {\n      return e.call(this, t, {\n        defaultOperatorName: \"$eq\",\n        operatorToConditionName: function (e) {\n          return e.slice(1);\n        }\n      }) || this;\n    }\n    return r = e, (t = n).prototype = Object.create(r.prototype), t.prototype.constructor = t, t.__proto__ = r, n.prototype.parse = function (t, r) {\n      return r && r.field ? a(this.parseFieldOperators(r.field, t)) : e.prototype.parse.call(this, t);\n    }, n;\n  }(i),\n  z = N;\nexport { x as $all, p as $and, v as $elemMatch, O as $eq, m as $exists, b as $gt, g as $gte, y as $in, E as $lt, j as $lte, h as $mod, R as $ne, $ as $nin, l as $nor, d as $not, q as $options, s as $or, _ as $regex, w as $size, A as $where, P as MongoQueryParser, z as allParsingInstructions };","map":{"version":3,"mappings":"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","names":["ensureIsArray","instruction","value","Array","isArray","Error","name","ensureIsNonEmptyArray","length","ensureIs","type","$and","validate","parse","queries","conditions","map","query","optimizedCompoundCondition","$or","$nor","$not","RegExp","constructor","Object","context","condition","FieldCondition","field","CompoundCondition","$elemMatch","hasOperators","ITSELF","$size","$in","$nin","$all","$mod","$exists","$gte","Date","$gt","$lt","$lte","$eq","$ne","$regex","rawValue","$options","NULL_CONDITION","$where","N","__proto__","MongoQueryParser","instructions","_ObjectQueryParser","defaultOperatorName","operatorToConditionName","slice","options","and","this","parseFieldOperators","ObjectQueryParser","allParsingInstructions"],"sources":["../../src/instructions.ts","../../src/MongoQueryParser.ts","../../src/index.ts"],"sourcesContent":["import {\n  CompoundCondition,\n  FieldCondition,\n  NamedInstruction,\n  CompoundInstruction,\n  FieldInstruction,\n  DocumentInstruction,\n  Comparable,\n  ITSELF,\n  NULL_CONDITION,\n  FieldParsingContext,\n  optimizedCompoundCondition,\n  ObjectQueryFieldParsingContext,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nfunction ensureIsArray(instruction: NamedInstruction, value: unknown) {\n  if (!Array.isArray(value)) {\n    throw new Error(`\"${instruction.name}\" expects value to be an array`);\n  }\n}\n\nfunction ensureIsNonEmptyArray(instruction: NamedInstruction, value: unknown[]) {\n  ensureIsArray(instruction, value);\n\n  if (!value.length) {\n    throw new Error(`\"${instruction.name}\" expects to have at least one element in array`);\n  }\n}\n\nfunction ensureIsComparable(instruction: NamedInstruction, value: string | number | Date) {\n  const isComparable = typeof value === 'string' || typeof value === 'number' || value instanceof Date;\n\n  if (!isComparable) {\n    throw new Error(`\"${instruction.name}\" expects value to be comparable (i.e., string, number or date)`);\n  }\n}\n\nconst ensureIs = (type: string) => (instruction: NamedInstruction, value: unknown) => {\n  if (typeof value !== type) { // eslint-disable-line valid-typeof\n    throw new Error(`\"${instruction.name}\" expects value to be a \"${type}\"`);\n  }\n};\n\nexport const $and: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n  parse(instruction, queries, { parse }) {\n    const conditions = queries.map(query => parse(query));\n    return optimizedCompoundCondition(instruction.name, conditions);\n  }\n};\nexport const $or = $and;\nexport const $nor: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n};\n\nexport const $not: FieldInstruction<MongoQuery<any> | RegExp> = {\n  type: 'field',\n  validate(instruction, value) {\n    const isValid = value && (value instanceof RegExp || value.constructor === Object);\n\n    if (!isValid) {\n      throw new Error(`\"${instruction.name}\" expects to receive either regular expression or object of field operators`);\n    }\n  },\n  parse(instruction, value, context) {\n    const condition = value instanceof RegExp\n      ? new FieldCondition('regex' as typeof instruction.name, context.field, value)\n      : context.parse(value, context);\n\n    return new CompoundCondition(instruction.name, [condition]);\n  },\n};\nexport const $elemMatch: FieldInstruction<MongoQuery<any>, ObjectQueryFieldParsingContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!value || value.constructor !== Object) {\n      throw new Error(`\"${instruction.name}\" expects to receive an object with nested query or field level operators`);\n    }\n  },\n  parse(instruction, value, { parse, field, hasOperators }) {\n    const condition = hasOperators(value) ? parse(value, { field: ITSELF }) : parse(value);\n    return new FieldCondition(instruction.name, field, condition);\n  }\n};\n\nexport const $size: FieldInstruction<number> = {\n  type: 'field',\n  validate: ensureIs('number')\n};\nexport const $in: FieldInstruction<unknown[]> = {\n  type: 'field',\n  validate: ensureIsArray,\n};\nexport const $nin = $in;\nexport const $all = $in;\nexport const $mod: FieldInstruction<[number, number]> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!Array.isArray(value) || value.length !== 2) {\n      throw new Error(`\"${instruction.name}\" expects an array with 2 numeric elements`);\n    }\n  }\n};\n\nexport const $exists: FieldInstruction<boolean> = {\n  type: 'field',\n  validate: ensureIs('boolean'),\n};\n\nexport const $gte: FieldInstruction<Comparable> = {\n  type: 'field',\n  validate: ensureIsComparable\n};\nexport const $gt = $gte;\nexport const $lt = $gt;\nexport const $lte = $gt;\n\nexport const $eq: FieldInstruction = {\n  type: 'field',\n};\nexport const $ne = $eq;\n\nexport interface RegExpFieldContext extends FieldParsingContext {\n  query: {\n    $options?: string\n  }\n}\n\nexport const $regex: FieldInstruction<string | RegExp, RegExpFieldContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!(value instanceof RegExp) && typeof value !== 'string') {\n      throw new Error(`\"${instruction.name}\" expects value to be a regular expression or a string that represents regular expression`);\n    }\n  },\n  parse(instruction, rawValue, context) {\n    const value = typeof rawValue === 'string'\n      ? new RegExp(rawValue, context.query.$options || '')\n      : rawValue;\n    return new FieldCondition(instruction.name, context.field, value);\n  }\n};\nexport const $options: FieldInstruction = {\n  type: 'field',\n  parse: () => NULL_CONDITION,\n};\n\nexport const $where: DocumentInstruction<() => boolean> = {\n  type: 'document',\n  validate: ensureIs('function'),\n};\n","import {\n  Condition,\n  buildAnd as and,\n  ParsingInstruction,\n  ObjectQueryParser,\n  FieldQueryOperators,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nexport interface ParseOptions {\n  field: string\n}\n\nexport class MongoQueryParser extends ObjectQueryParser<MongoQuery<any>> {\n  constructor(instructions: Record<string, ParsingInstruction>) {\n    super(instructions, {\n      defaultOperatorName: '$eq',\n      operatorToConditionName: name => name.slice(1),\n    });\n  }\n\n  parse<Q extends MongoQuery<any>, FQ extends FieldQueryOperators<Q> = FieldQueryOperators<Q>>(\n    query: Q | FQ,\n    options?: ParseOptions\n  ): Condition {\n    if (options && options.field) {\n      return and(this.parseFieldOperators(options.field, query as FQ));\n    }\n\n    return super.parse(query);\n  }\n}\n","import * as instructions from './instructions';\n\nexport const allParsingInstructions = instructions;\nexport * from './instructions';\nexport * from './MongoQueryParser';\nexport * from './types';\nexport { defaultInstructionParsers as defaultParsers } from '@ucast/core';\n"]},"metadata":{},"sourceType":"module"}