{"ast":null,"code":"import mock from '../mock';\nimport jwt from 'jsonwebtoken';\nconst data = {\n  users: [{\n    id: 1,\n    fullName: 'John Doe',\n    username: 'johndoe',\n    password: 'admin',\n    avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\n    email: 'admin@demo.com',\n    role: 'admin',\n    ability: [{\n      action: 'manage',\n      subject: 'all'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }, {\n    id: 2,\n    fullName: 'Jane Doe',\n    username: 'janedoe',\n    password: 'client',\n    avatar: require('@src/assets/images/avatars/1-small.png').default,\n    email: 'client@demo.com',\n    role: 'client',\n    ability: [{\n      action: 'read',\n      subject: 'ACL'\n    }, {\n      action: 'read',\n      subject: 'Auth'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }]\n};\n\n// ! These two secrets shall be in .env file and not in any other file\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n};\nmock.onPost('/jwt/login').reply(request => {\n  const {\n    email,\n    password\n  } = JSON.parse(request.data);\n  let error = {\n    email: ['Something went wrong']\n  };\n  const user = data.users.find(u => u.email === email && u.password === password);\n  if (user) {\n    try {\n      const accessToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      const refreshToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      });\n      const userData = {\n        ...user\n      };\n      delete userData.password;\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    };\n  }\n  return [400, {\n    error\n  }];\n});\nmock.onPost('/jwt/register').reply(request => {\n  if (request.data.length > 0) {\n    const {\n      email,\n      password,\n      username\n    } = JSON.parse(request.data);\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email);\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username);\n    const error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n    };\n    if (!error.username && !error.email) {\n      const userData = {\n        email,\n        password,\n        username,\n        fullName: '',\n        avatar: null,\n        role: 'admin',\n        ability: [{\n          action: 'manage',\n          subject: 'all'\n        }]\n      };\n\n      // Add user id\n      const length = data.users.length;\n      let lastIndex = 0;\n      if (length) {\n        lastIndex = data.users[length - 1].id;\n      }\n      userData.id = lastIndex + 1;\n      data.users.push(userData);\n      const accessToken = jwt.sign({\n        id: userData.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      const user = Object.assign({}, userData);\n      delete user['password'];\n      const response = {\n        user,\n        accessToken\n      };\n      return [200, response];\n    } else {\n      return [200, {\n        error\n      }];\n    }\n  }\n});\nmock.onPost('/jwt/refresh-token').reply(request => {\n  const {\n    refreshToken\n  } = JSON.parse(request.data);\n  try {\n    const {\n      id\n    } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret);\n    const userData = {\n      ...data.users.find(user => user.id === id)\n    };\n    const newAccessToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    const newRefreshToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.refreshTokenSecret, {\n      expiresIn: jwtConfig.refreshTokenExpireTime\n    });\n    delete userData.password;\n    const response = {\n      userData,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    };\n    return [200, response];\n  } catch (e) {\n    const error = 'Invalid refresh token';\n    return [401, {\n      error\n    }];\n  }\n});","map":{"version":3,"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","email","role","ability","action","subject","extras","eCommerceCartItemsCount","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","JSON","parse","error","user","find","u","accessToken","sign","expiresIn","refreshToken","userData","response","e","length","isEmailAlreadyInUse","isUsernameAlreadyInUse","lastIndex","push","Object","assign","verify","newAccessToken","newRefreshToken"],"sources":["/Users/admin/full-version/src/@fake-db/jwt/index.js"],"sourcesContent":["import mock from '../mock'\nimport jwt from 'jsonwebtoken'\n\nconst data = {\n  users: [\n    {\n      id: 1,\n      fullName: 'John Doe',\n      username: 'johndoe',\n      password: 'admin',\n      avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\n      email: 'admin@demo.com',\n      role: 'admin',\n      ability: [\n        {\n          action: 'manage',\n          subject: 'all'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    },\n    {\n      id: 2,\n      fullName: 'Jane Doe',\n      username: 'janedoe',\n      password: 'client',\n      avatar: require('@src/assets/images/avatars/1-small.png').default,\n      email: 'client@demo.com',\n      role: 'client',\n      ability: [\n        {\n          action: 'read',\n          subject: 'ACL'\n        },\n        {\n          action: 'read',\n          subject: 'Auth'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    }\n  ]\n}\n\n// ! These two secrets shall be in .env file and not in any other file\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n}\n\nmock.onPost('/jwt/login').reply(request => {\n  const { email, password } = JSON.parse(request.data)\n\n  let error = {\n    email: ['Something went wrong']\n  }\n\n  const user = data.users.find(u => u.email === email && u.password === password)\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      })\n\n      const userData = { ...user }\n\n      delete userData.password\n\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      }\n\n      return [200, response]\n    } catch (e) {\n      error = e\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    }\n  }\n\n  return [400, { error }]\n})\n\nmock.onPost('/jwt/register').reply(request => {\n  if (request.data.length > 0) {\n    const { email, password, username } = JSON.parse(request.data)\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email)\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\n    const error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n    }\n\n    if (!error.username && !error.email) {\n      const userData = {\n        email,\n        password,\n        username,\n        fullName: '',\n        avatar: null,\n        role: 'admin',\n        ability: [\n          {\n            action: 'manage',\n            subject: 'all'\n          }\n        ]\n      }\n\n      // Add user id\n      const length = data.users.length\n      let lastIndex = 0\n      if (length) {\n        lastIndex = data.users[length - 1].id\n      }\n      userData.id = lastIndex + 1\n\n      data.users.push(userData)\n\n      const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n\n      const user = Object.assign({}, userData)\n      delete user['password']\n      const response = { user, accessToken }\n\n      return [200, response]\n    } else {\n      return [200, { error }]\n    }\n  }\n})\n\nmock.onPost('/jwt/refresh-token').reply(request => {\n  const { refreshToken } = JSON.parse(request.data)\n\n  try {\n    const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\n\n    const userData = { ...data.users.find(user => user.id === id) }\n\n    const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\n    const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\n      expiresIn: jwtConfig.refreshTokenExpireTime\n    })\n\n    delete userData.password\n    const response = {\n      userData,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    }\n\n    return [200, response]\n  } catch (e) {\n    const error = 'Invalid refresh token'\n    return [401, { error }]\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}