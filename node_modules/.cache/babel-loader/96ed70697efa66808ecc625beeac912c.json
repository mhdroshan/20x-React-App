{"ast":null,"code":"import { createFactory as t, $eq as r, $ne as i, $lt as n, $lte as e, $gt as u, $gte as o, $in as s, $nin as f, $all as a, $size as c, $regex as h, $options as v, $elemMatch as l, $exists as d, eq as b, ne as y, lt as p, lte as w, gt as g, gte as E, within as A, nin as $, all as j, size as m, regex as M, elemMatch as x, exists as O, and as F } from \"@ucast/mongo2js\";\nfunction _(t, r) {\n  for (var i = 0; i < r.length; i++) {\n    var n = r[i];\n    n.enumerable = n.enumerable || false;\n    n.configurable = true;\n    if (\"value\" in n) n.writable = true;\n    Object.defineProperty(t, n.key, n);\n  }\n}\nfunction P(t, r, i) {\n  if (r) _(t.prototype, r);\n  if (i) _(t, i);\n  return t;\n}\nfunction R() {\n  R = Object.assign || function (t) {\n    for (var r = 1; r < arguments.length; r++) {\n      var i = arguments[r];\n      for (var n in i) if (Object.prototype.hasOwnProperty.call(i, n)) t[n] = i[n];\n    }\n    return t;\n  };\n  return R.apply(this, arguments);\n}\nfunction k(t, r) {\n  t.prototype = Object.create(r.prototype);\n  t.prototype.constructor = t;\n  B(t, r);\n}\nfunction B(t, r) {\n  B = Object.setPrototypeOf || function t(r, i) {\n    r.__proto__ = i;\n    return r;\n  };\n  return B(t, r);\n}\nfunction C(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\nfunction T(t) {\n  return Array.isArray(t) ? t : [t];\n}\nvar q = \"__caslSubjectType__\";\nfunction z(t, r) {\n  if (r) if (!r.hasOwnProperty(q)) Object.defineProperty(r, q, {\n    value: t\n  });else if (t !== r[q]) throw new Error(\"Trying to cast object to subject type \" + t + \" but previously it was casted to \" + r[q]);\n  return r;\n}\nvar S = function t(r) {\n  var i = typeof r;\n  return \"string\" === i || \"function\" === i;\n};\nvar Y = function t(r) {\n  return r.modelName || r.name;\n};\nvar D = function t(r) {\n  return \"string\" === typeof r ? r : Y(r);\n};\nfunction L(t) {\n  if (t.hasOwnProperty(q)) return t[q];\n  return Y(t.constructor);\n}\nfunction G(t, r, i) {\n  var n = T(r);\n  var e = 0;\n  while (e < n.length) {\n    var u = n[e++];\n    if (t.hasOwnProperty(u)) n = i(n, t[u]);\n  }\n  return n;\n}\nfunction H(t, r) {\n  if (\"string\" === typeof r && -1 !== t.indexOf(r)) return r;\n  for (var i = 0; i < r.length; i++) if (-1 !== t.indexOf(r[i])) return r[i];\n  return null;\n}\nvar I = function t(r, i) {\n  return r.concat(i);\n};\nfunction J(t, r) {\n  if (r in t) throw new Error('Cannot use \"' + r + \"\\\" as an alias because it's reserved action.\");\n  var i = Object.keys(t);\n  var n = function t(i, n) {\n    var e = H(i, n);\n    if (e) throw new Error(\"Detected cycle \" + e + \" -> \" + i.join(\", \"));\n    var u = \"string\" === typeof n && n === r || -1 !== i.indexOf(r) || Array.isArray(n) && -1 !== n.indexOf(r);\n    if (u) throw new Error('Cannot make an alias to \"' + r + '\" because this is reserved action');\n    return i.concat(n);\n  };\n  for (var e = 0; e < i.length; e++) G(t, i[e], n);\n}\nfunction K(t, r) {\n  if (!r || false !== r.skipValidate) J(t, r && r.anyAction || \"manage\");\n  return function (r) {\n    return G(t, r, I);\n  };\n}\nfunction N(t, r, i) {\n  for (var n = i; n < r.length; n++) t.push(r[n]);\n}\nfunction Q(t, r) {\n  if (!t || !t.length) return r || [];\n  if (!r || !r.length) return t || [];\n  var i = 0;\n  var n = 0;\n  var e = [];\n  while (i < t.length && n < r.length) if (t[i].priority < r[n].priority) {\n    e.push(t[i]);\n    i++;\n  } else {\n    e.push(r[n]);\n    n++;\n  }\n  N(e, t, i);\n  N(e, r, n);\n  return e;\n}\nfunction U(t, r, i) {\n  var n = t.get(r);\n  if (!n) {\n    n = i();\n    t.set(r, n);\n  }\n  return n;\n}\nvar V = function t(r) {\n  return r;\n};\nfunction W(t, r) {\n  if (Array.isArray(t.fields) && !t.fields.length) throw new Error(\"`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa\");\n  if (t.fields && !r.fieldMatcher) throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  if (t.conditions && !r.conditionsMatcher) throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n}\nvar X = function () {\n  function t(t, r, i) {\n    if (void 0 === i) i = 0;\n    W(t, r);\n    this.action = r.resolveAction(t.action);\n    this.subject = t.subject;\n    this.inverted = !!t.inverted;\n    this.conditions = t.conditions;\n    this.reason = t.reason;\n    this.fields = t.fields ? T(t.fields) : void 0;\n    this.priority = i;\n    this.t = r;\n  }\n  var r = t.prototype;\n  r.i = function t() {\n    if (this.conditions && !this.u) this.u = this.t.conditionsMatcher(this.conditions);\n    return this.u;\n  };\n  r.matchesConditions = function t(r) {\n    if (!this.conditions) return true;\n    if (!r || S(r)) return !this.inverted;\n    var i = this.i();\n    return i(r);\n  };\n  r.matchesField = function t(r) {\n    if (!this.fields) return true;\n    if (!r) return !this.inverted;\n    if (this.fields && !this.o) this.o = this.t.fieldMatcher(this.fields);\n    return this.o(r);\n  };\n  P(t, [{\n    key: \"ast\",\n    get: function t() {\n      var r = this.i();\n      return r ? r.ast : void 0;\n    }\n  }]);\n  return t;\n}();\nfunction Z(t, r) {\n  var i = {\n    value: t,\n    prev: r,\n    next: null\n  };\n  if (r) r.next = i;\n  return i;\n}\nfunction tt(t) {\n  if (t.next) t.next.prev = t.prev;\n  if (t.prev) t.prev.next = t.next;\n  t.next = t.prev = null;\n}\nvar rt = function t(r) {\n  return {\n    value: r.value,\n    prev: r.prev,\n    next: r.next\n  };\n};\nvar it = function t() {\n  return {\n    rules: [],\n    merged: false\n  };\n};\nvar nt = function t() {\n  return new Map();\n};\nvar et = function t(r, i) {\n  if (!r.h && i.fields) r.h = true;\n};\nvar ut = function () {\n  function t(t, r) {\n    if (void 0 === t) t = [];\n    if (void 0 === r) r = {};\n    this.h = false;\n    this.v = new Map();\n    this.l = {\n      conditionsMatcher: r.conditionsMatcher,\n      fieldMatcher: r.fieldMatcher,\n      resolveAction: r.resolveAction || V\n    };\n    this.p = r.anyAction || \"manage\";\n    this.g = r.anySubjectType || \"all\";\n    this.A = r.detectSubjectType || L;\n    this.$ = t;\n    this.j = this.m(t);\n  }\n  var r = t.prototype;\n  r.detectSubjectType = function t(r) {\n    if (S(r)) return r;\n    if (!r) return this.g;\n    return this.A(r);\n  };\n  r.update = function t(r) {\n    var i = {\n      rules: r,\n      ability: this,\n      target: this\n    };\n    this.M(\"update\", i);\n    this.$ = r;\n    this.j = this.m(r);\n    this.M(\"updated\", i);\n    return this;\n  };\n  r.m = function t(r) {\n    var i = new Map();\n    for (var n = r.length - 1; n >= 0; n--) {\n      var e = r.length - n - 1;\n      var u = new X(r[n], this.l, e);\n      var o = T(u.action);\n      var s = T(u.subject || this.g);\n      et(this, u);\n      for (var f = 0; f < s.length; f++) {\n        var a = U(i, s[f], nt);\n        for (var c = 0; c < o.length; c++) U(a, o[c], it).rules.push(u);\n      }\n    }\n    return i;\n  };\n  r.possibleRulesFor = function t(r, i) {\n    if (void 0 === i) i = this.g;\n    if (!S(i)) throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    var n = U(this.j, i, nt);\n    var e = U(n, r, it);\n    if (e.merged) return e.rules;\n    var u = r !== this.p && n.has(this.p) ? n.get(this.p).rules : void 0;\n    var o = Q(e.rules, u);\n    if (i !== this.g) o = Q(o, this.possibleRulesFor(r, this.g));\n    e.rules = o;\n    e.merged = true;\n    return o;\n  };\n  r.rulesFor = function t(r, i, n) {\n    var e = this.possibleRulesFor(r, i);\n    if (n && \"string\" !== typeof n) throw new Error(\"The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details\");\n    if (!this.h) return e;\n    return e.filter(function (t) {\n      return t.matchesField(n);\n    });\n  };\n  r.on = function t(r, i) {\n    var n = this;\n    var e = this.v.get(r) || null;\n    var u = Z(i, e);\n    this.v.set(r, u);\n    return function () {\n      var t = n.v.get(r);\n      if (!u.next && !u.prev && t === u) n.v.delete(r);else if (u === t) n.v.set(r, u.prev);\n      tt(u);\n    };\n  };\n  r.M = function t(r, i) {\n    var n = this.v.get(r) || null;\n    while (null !== n) {\n      var e = n.prev ? rt(n.prev) : null;\n      n.value(i);\n      n = e;\n    }\n  };\n  P(t, [{\n    key: \"rules\",\n    get: function t() {\n      return this.$;\n    }\n  }]);\n  return t;\n}();\nvar ot = function (t) {\n  k(PureAbility, t);\n  function PureAbility() {\n    return t.apply(this, arguments) || this;\n  }\n  var r = PureAbility.prototype;\n  r.can = function t() {\n    var r = this.relevantRuleFor.apply(this, arguments);\n    return !!r && !r.inverted;\n  };\n  r.relevantRuleFor = function t(r, i, n) {\n    var e = this.detectSubjectType(i);\n    var u = this.rulesFor(r, e, n);\n    for (var o = 0, s = u.length; o < s; o++) if (u[o].matchesConditions(i)) return u[o];\n    return null;\n  };\n  r.cannot = function t() {\n    return !this.can.apply(this, arguments);\n  };\n  return PureAbility;\n}(ut);\nvar st = {\n  $eq: r,\n  $ne: i,\n  $lt: n,\n  $lte: e,\n  $gt: u,\n  $gte: o,\n  $in: s,\n  $nin: f,\n  $all: a,\n  $size: c,\n  $regex: h,\n  $options: v,\n  $elemMatch: l,\n  $exists: d\n};\nvar ft = {\n  eq: b,\n  ne: y,\n  lt: p,\n  lte: w,\n  gt: g,\n  gte: E,\n  in: A,\n  nin: $,\n  all: j,\n  size: m,\n  regex: M,\n  elemMatch: x,\n  exists: O,\n  and: F\n};\nvar at = function r(i, n, e) {\n  return t(R({}, st, i), R({}, ft, n), e);\n};\nvar ct = t(st, ft);\nvar ht = /[-/\\\\^$+?.()|[\\]{}]/g;\nvar vt = /\\.?\\*+\\.?/g;\nvar lt = /\\*+/;\nvar dt = /\\./g;\nfunction bt(t, r, i) {\n  var n = \"*\" === i[0] || \".\" === t[0] && \".\" === t[t.length - 1] ? \"+\" : \"*\";\n  var e = -1 === t.indexOf(\"**\") ? \"[^.]\" : \".\";\n  var u = t.replace(dt, \"\\\\$&\").replace(lt, e + n);\n  return r + t.length === i.length ? \"(?:\" + u + \")?\" : u;\n}\nfunction yt(t, r, i) {\n  if (\".\" === t && (\"*\" === i[r - 1] || \"*\" === i[r + 1])) return t;\n  return \"\\\\\" + t;\n}\nfunction pt(t) {\n  var r = t.map(function (t) {\n    return t.replace(ht, yt).replace(vt, bt);\n  });\n  var i = r.length > 1 ? \"(?:\" + r.join(\"|\") + \")\" : r[0];\n  return new RegExp(\"^\" + i + \"$\");\n}\nvar wt = function t(r) {\n  var i;\n  return function (t) {\n    if (\"undefined\" === typeof i) i = r.every(function (t) {\n      return -1 === t.indexOf(\"*\");\n    }) ? null : pt(r);\n    return null === i ? -1 !== r.indexOf(t) : i.test(t);\n  };\n};\nvar gt = function (t) {\n  k(Ability, t);\n  function Ability(r, i) {\n    if (void 0 === r) r = [];\n    if (void 0 === i) i = {};\n    return t.call(this, r, R({\n      conditionsMatcher: ct,\n      fieldMatcher: wt\n    }, i)) || this;\n  }\n  return Ability;\n}(ot);\nvar Et = function () {\n  function t(t) {\n    this.O = t;\n  }\n  var r = t.prototype;\n  r.because = function t(r) {\n    this.O.reason = r;\n    return this;\n  };\n  return t;\n}();\nvar At = function () {\n  function AbilityBuilder(t) {\n    this.rules = [];\n    this.F = t;\n    this.can = this.can.bind(this);\n    this.cannot = this.cannot.bind(this);\n    this.build = this.build.bind(this);\n  }\n  var t = AbilityBuilder.prototype;\n  t.can = function t(r, i, n, e) {\n    var u = {\n      action: r\n    };\n    if (i) {\n      u.subject = i;\n      if (Array.isArray(n) || \"string\" === typeof n) u.fields = n;else if (\"undefined\" !== typeof n) u.conditions = n;\n      if (\"undefined\" !== typeof e) u.conditions = e;\n    }\n    this.rules.push(u);\n    return new Et(u);\n  };\n  t.cannot = function t(r, i, n, e) {\n    var u = this.can(r, i, n, e);\n    u.O.inverted = true;\n    return u;\n  };\n  t.build = function t(r) {\n    return new this.F(this.rules, r);\n  };\n  return AbilityBuilder;\n}();\nfunction defineAbility(t, r) {\n  var i = new At(gt);\n  var n = t(i.can, i.cannot);\n  if (n && \"function\" === typeof n.then) return n.then(function () {\n    return i.build(r);\n  });\n  return i.build(r);\n}\nvar $t = function t(r) {\n  return 'Cannot execute \"' + r.action + '\" on \"' + r.subjectType + '\"';\n};\nvar jt = function t(r) {\n  this.message = r;\n};\njt.prototype = Object.create(Error.prototype);\nvar mt = function (t) {\n  k(ForbiddenError, t);\n  ForbiddenError.setDefaultMessage = function t(r) {\n    this._ = \"string\" === typeof r ? function () {\n      return r;\n    } : r;\n  };\n  ForbiddenError.from = function t(r) {\n    return new this(r);\n  };\n  function ForbiddenError(r) {\n    var i;\n    i = t.call(this, \"\") || this;\n    i.ability = r;\n    if (\"function\" === typeof Error.captureStackTrace) {\n      i.name = \"ForbiddenError\";\n      Error.captureStackTrace(C(i), i.constructor);\n    }\n    return i;\n  }\n  var r = ForbiddenError.prototype;\n  r.setMessage = function t(r) {\n    this.message = r;\n    return this;\n  };\n  r.throwUnlessCan = function t() {\n    var r;\n    var i = (r = this.ability).relevantRuleFor.apply(r, arguments);\n    if (i && !i.inverted) return;\n    this.action = arguments.length <= 0 ? void 0 : arguments[0];\n    this.subject = arguments.length <= 1 ? void 0 : arguments[1];\n    this.subjectType = D(this.ability.detectSubjectType(arguments.length <= 1 ? void 0 : arguments[1]));\n    this.field = arguments.length <= 2 ? void 0 : arguments[2];\n    var n = i ? i.reason : \"\";\n    this.message = this.message || n || this.constructor._(this);\n    throw this;\n  };\n  return ForbiddenError;\n}(jt);\nmt._ = $t;\nvar Mt = Object.freeze({\n  __proto__: null\n});\nexport { gt as Ability, At as AbilityBuilder, mt as ForbiddenError, ot as PureAbility, at as buildMongoQueryMatcher, K as createAliasResolver, defineAbility, L as detectSubjectType, wt as fieldPatternMatcher, $t as getDefaultErrorMessage, Mt as hkt, ct as mongoQueryMatcher, z as subject, T as wrapArray };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAASA,EAAaC;EAAAA,OACpBC,MAAMC,QAAQF,KAASA,IAAQ,CAACA;AAAAA;AAoBzC,IAAMG,IAAa;AACZ,SAASC,EAGdC,GAASC;EAAAA,IACLA,QACGA,EAAOC,eAAeJ,IACzBK,OAAOC,eAAeH,GAAQH,GAAY;IAAEH,OAAOK;EAAAA,QAC9C,IAAIA,MAASC,EAAOH,UACnB,IAAIO,iDAA+CL,0CAAwCC,EAAOH;EAAAA,OAIrGG;AAAAA;AAGF,IAAMK,IAAgB,SAAhBA,EAAiBX;EAAAA,IACtBK,WAAcL;EAAAA,OACJ,aAATK,KAA8B,eAATA;AAAAA;AAG9B,IAAMO,IAAsB,SAAtBA,EAAuBZ;EAAAA,OAAwBA,EAAMa,aAAab,EAAMc;AAAAA;AACvE,IAAMC,IAAqB,SAArBA,EAAsBf;EAAAA,OACT,oBAAVA,IAAqBA,IAAQY,EAAoBZ;AAAAA;AAG1D,SAASgB,EAAkBC;EAAAA,IAC5BA,EAAQV,eAAeJ,WACjBc,EAAgBd;EAAAA,OAGnBS,EAAoBK,EAAQC;AAAAA;AAIrC,SAASC,EAAcC,GAAsBC,GAA+BC;EAAAA,IACtEC,IAAUxB,EAAUsB;EAAAA,IACpBG,IAAI;EAAA,OAEDA,IAAID,EAAQE,QAAQ;IAAA,IACnBC,IAASH,EAAQC;IAAAA,IAEnBJ,EAASb,eAAemB,IAC1BH,IAAUD,EAAMC,GAASH,EAASM;EAAAA;EAAAA,OAI/BH;AAAAA;AAGT,SAASI,EAAcJ,GAAmBK;EAAAA,IACZ,oBAAjBA,MAAgE,MAAnCL,EAAQM,QAAQD,WAC/CA;EAAAA,KAGJ,IAAIJ,IAAI,GAAGA,IAAII,EAAaH,QAAQD,UACG,MAAtCD,EAAQM,QAAQD,EAAaJ,KAAY,OAAOI,EAAaJ;EAAAA,OAG5D;AAAA;AAGT,IAAMM,IAAgC,SAAhCA,EAAiCP,GAASG;EAAAA,OAAWH,EAAQQ,OAAOL;AAAAA;AAC1E,SAASM,EAAkBZ,GAAsBa;EAAAA,IAC3CA,KAAkBb,SACd,IAAIV,uBAAqBuB;EAAAA,IAG3BC,IAAO1B,OAAO0B,KAAKd;EAAAA,IACnBe,IAA0C,SAA1CA,EAA2CZ,GAASG;IAAAA,IAClDU,IAAYT,EAAcJ,GAASG;IAAAA,IACrCU,GAAW,MAAM,IAAI1B,0BAAwB0B,aAAgBb,EAAQc,KAAK;IAAA,IAExEC,IAA0C,oBAAXZ,KAAuBA,MAAWO,MAC7B,MAArCV,EAAQM,QAAQI,MAChBhC,MAAMC,QAAQwB,OAA+C,MAApCA,EAAOG,QAAQI;IAAAA,IACzCK,GAAuB,MAAM,IAAI5B,oCAAkCuB;IAAAA,OAEhEV,EAAQQ,OAAOL;EAAAA;EAAAA,KAGnB,IAAIF,IAAI,GAAGA,IAAIU,EAAKT,QAAQD,KAC/BL,EAAcC,GAAUc,EAAKV,IAAIW;AAAAA;AAK9B,SAASI,EAAoBnB,GAAsBoB;EAAAA,KACnDA,KAAoC,UAAzBA,EAAQC,cACtBT,EAAkBZ,GAAUoB,KAAWA,EAAQE,aAAa;EAAA,OAGvD,UAAChB;IAAAA,OAA8BP,EAAcC,GAAUM,GAAQI;EAAAA;AAAAA;AAGxE,SAASa,EAAeC,GAAWC,GAAaC;EAAAA,KACzC,IAAItB,IAAIsB,GAAOtB,IAAIqB,EAAOpB,QAAQD,KACrCoB,EAAKG,KAAKF,EAAOrB;AAAAA;AAId,SAASwB,EACdC,GACAC;EAAAA,KAEKD,MAAUA,EAAMxB,eACZyB,KAAgB;EAAA,KAGpBA,MAAiBA,EAAazB,eAC1BwB,KAAS;EAAA,IAGdzB,IAAI;EAAA,IACJ2B,IAAI;EAAA,IACFC,IAAc;EAAA,OAEb5B,IAAIyB,EAAMxB,UAAU0B,IAAID,EAAazB,YACtCwB,EAAMzB,GAAG6B,WAAWH,EAAaC,GAAGE,UAAU;IAChDD,EAAOL,KAAKE,EAAMzB;IAClBA;EAAAA,OACK;IACL4B,EAAOL,KAAKG,EAAaC;IACzBA;EAAAA;EAIJR,EAAYS,GAAQH,GAAOzB;EAC3BmB,EAAYS,GAAQF,GAAcC;EAAAA,OAE3BC;AAAAA;AAGF,SAASE,EAAmBC,GAAgBC,GAAQC;EAAAA,IACrDzD,IAAQuD,EAAIG,IAAIF;EAAAA,KAEfxD,GAAO;IACVA,IAAQyD;IACRF,EAAII,IAAIH,GAAKxD;EAAAA;EAAAA,OAGRA;AAAAA;AAGF,IAAM4D,IAAW,SAAXA,EAAeC;EAAAA,OAASA;AAAAA;ACzJrC,SAASC,EAASC,GAAmCvB;EAAAA,IAC/CvC,MAAMC,QAAQ6D,EAAKC,YAAYD,EAAKC,OAAOvC,cACvC,IAAIf,MAAM;EAAA,IAGdqD,EAAKC,WAAWxB,EAAQyB,oBACpB,IAAIvD,MAAM;EAAA,IAGdqD,EAAKG,eAAe1B,EAAQ2B,yBACxB,IAAIzD,MAAM;AAAA;AAAA,IAUP0D;EAAAA,WAaTL,GACAvB,GACAa;IAAAA,sBAAmB;IAEnBS,EAASC,GAAMvB;IAAAA,KAEVd,SAASc,EAAQ6B,cAAcN,EAAKrC;IAAAA,KACpCT,UAAU8C,EAAK9C;IAAAA,KACfqD,aAAaP,EAAKO;IAAAA,KAClBJ,aAAaH,EAAKG;IAAAA,KAClBK,SAASR,EAAKQ;IAAAA,KACdP,SAASD,EAAKC,SAASjE,EAAUgE,EAAKC,eAAUQ;IAAAA,KAChDnB,WAAWA;IAAAA,KACXoB,IAAWjC;EAAAA;EAAAA;EAAAA,EAGVkC,IAAR;IAAA,IACMC,KAAKT,eAAeS,KAAKC,QACtBA,IAAmBD,KAAKF,EAASN,kBAAmBQ,KAAKT;IAAAA,OAGzDS,KAAKC;EAAAA;EAAAA,EAQdC,+BAAkBvE;IAAAA,KACXqE,KAAKT,mBACD;IAAA,KAGJ5D,KAAUK,EAAcL,YACnBqE,KAAKL;IAAAA,IAGTQ,IAAUH,KAAKD;IAAAA,OACdI,EAAQxE;EAAAA;EAAAA,EAGjByE,0BAAaC;IAAAA,KACNL,KAAKX,eACD;IAAA,KAGJgB,WACKL,KAAKL;IAAAA,IAGXK,KAAKX,WAAWW,KAAKM,QAClBA,IAAcN,KAAKF,EAASR,aAAcU,KAAKX;IAAAA,OAG/CW,KAAKM,EAAaD;EAAAA;EAAAA;IAAAA;IAAAA,KA/B3B;MAAA,IACQF,IAAUH,KAAKD;MAAAA,OACdI,IAAUA,EAAQI,WAAMV;IAAAA;EAAAA;EAAAA;AAAAA;ACnE5B,SAASW,EAAcnF,GAAUoF;EAAAA,IAChCC,IAAO;IAAErF;IAAOoF;IAAME,MAAM;EAAA;EAAA,IAE9BF,GACFA,EAAKE,OAAOD;EAAAA,OAGPA;AAAAA;AAGF,SAASE,GAAWF;EAAAA,IACrBA,EAAKC,MACPD,EAAKC,KAAKF,OAAOC,EAAKD;EAAAA,IAGpBC,EAAKD,MACPC,EAAKD,KAAKE,OAAOD,EAAKC;EAGxBD,EAAKC,OAAOD,EAAKD,OAAO;AAAA;AAGnB,IAAMI,KAAkB,SAAlBA,EAA8CH;EAAAA,OAAgB;IACzErF,OAAOqF,EAAKrF;IACZoF,MAAMC,EAAKD;IACXE,MAAMD,EAAKC;EAAAA;AAAAA;AC0Cb,IAAMG,KAAqB,SAArBA;EAAAA,OAA4B;IAChCC,OAAO;IACPtC,QAAQ;EAAA;AAAA;AAEV,IAAMuC,KAAsB,SAAtBA;EAAAA,OAA4B,IAAIC;AAAAA;AACtC,IAAMC,KAAU,SAAVA,EAAWC,GAAY/B;EAAAA,KACtB+B,EAAMC,KAAqBhC,EAAKC,QACnC8B,EAAMC,IAAoB;AAAA;AAAA,IAejBC;EAAAA,WAaTN,GACAlD;IAAAA,eADAkD,OAAsC;IAAA,eACtClD,OAA2C;IAAA,KAbrCuD,IAA6B;IAAA,KAC7BE,IAAwB,IAAIL;IAAAA,KAc7BM,IAAe;MAClB/B,mBAAmB3B,EAAQ2B;MAC3BF,cAAczB,EAAQyB;MACtBI,eAAe7B,EAAQ6B,iBAAiBT;IAAAA;IAAAA,KAErCuC,IAAa3D,EAAQE,aAAa;IAAA,KAClC0D,IAAkB5D,EAAQ6D,kBAAkB;IAAA,KAC5CC,IAAqB9D,EAAQxB,qBAAqBA;IAAAA,KAClDuF,IAASb;IAAAA,KACTc,IAAgB7B,KAAK8B,EAAef;EAAAA;EAAAA;EAAAA,EAO3C1E,+BAAkBV;IAAAA,IACZK,EAAcL,IAAS,OAAOA;IAAAA,KAC7BA,GAAQ,OAAOqE,KAAKyB;IAAAA,OAClBzB,KAAK2B,EAAmBhG;EAAAA;EAAAA,EAGjCoG,oBAAOhB;IAAAA,IACCiB,IAAQ;MACZjB;MACAkB,SAASjC;MACT9B,QAAQ8B;IAAAA;IAAAA,KAGLkC,EAAM,UAAUF;IAAAA,KAChBJ,IAASb;IAAAA,KACTc,IAAgB7B,KAAK8B,EAAef;IAAAA,KACpCmB,EAAM,WAAWF;IAAAA,OAEfhC;EAAAA;EAAAA,EAGD8B,IAAR,WAAuBK;IAAAA,IACfC,IAAyC,IAAInB;IAAAA,KAE9C,IAAIpE,IAAIsF,EAASrF,SAAS,GAAGD,KAAK,GAAGA,KAAK;MAAA,IACvC6B,IAAWyD,EAASrF,SAASD,IAAI;MAAA,IACjCuC,IAAO,IAAIK,EAAK0C,EAAStF,IAAImD,KAAKuB,GAAc7C;MAAAA,IAChD9B,IAAUxB,EAAUgE,EAAKrC;MAAAA,IACzBsF,IAAWjH,EAAUgE,EAAK9C,WAAW0D,KAAKyB;MAChDP,GAAQlB,MAAMZ;MAAAA,KAET,IAAIkD,IAAI,GAAGA,IAAID,EAASvF,QAAQwF,KAAK;QAAA,IAClCC,IAAe5D,EAAayD,GAAcC,EAASC,IAAItB;QAAAA,KAExD,IAAIxC,IAAI,GAAGA,IAAI5B,EAAQE,QAAQ0B,KAClCG,EAAa4D,GAAc3F,EAAQ4B,IAAIsC,IAAoBC,MAAM3C,KAAKgB;MAAAA;IAAAA;IAAAA,OAKrEgD;EAAAA;EAAAA,EAITI,8BACEzF,GACA0F;IAAAA,sBAA2BzC,KAAKyB;IAAAA,KAE3BzF,EAAcyG,UACX,IAAI1G,MAAM;IAAA,IAGZwG,IAAe5D,EAAaqB,KAAK6B,GAAeY,GAAazB;IAAAA,IAC7D0B,IAAc/D,EAAa4D,GAAcxF,GAAQ+D;IAAAA,IAEnD4B,EAAYjE,eACPiE,EAAY3B;IAAAA,IAGf4B,IAAiB5F,MAAWiD,KAAKwB,KAAce,EAAaK,IAAI5C,KAAKwB,KACvEe,EAAaxD,IAAIiB,KAAKwB,GAAaT,aACnClB;IAAAA,IACAkB,IAAQ1C,EAAiBqE,EAAY3B,OAAO4B;IAAAA,IAE5CF,MAAgBzC,KAAKyB,GACvBV,IAAQ1C,EAAiB0C,GAAQf,KAAawC,iBAAiBzF,GAAQiD,KAAKyB;IAG9EiB,EAAY3B,QAAQA;IACpB2B,EAAYjE,SAAS;IAAA,OAEdsC;EAAAA;EAAAA,EAIT8B,sBAAS9F,GAAgB0F,GAA2BpC;IAAAA,IAC5CU,IAAgCf,KAAawC,iBAAiBzF,GAAQ0F;IAAAA,IAExEpC,KAA0B,oBAAVA,SACZ,IAAItE,MAAM;IAAA,KAGbiE,KAAKoB,UACDL;IAAAA,OAGFA,EAAM+B,OAAO;MAAA1D,OAAQA,EAAKgB,aAAaC;IAAAA;EAAAA;EAAAA,EAGhD0C,gBACEf,GACAgB;IAAAA;IAAAA,IAEMC,IAAOjD,KAAKsB,EAAQvC,IAAIiD,MAAU;IAAA,IAClCtB,IAAOF,EAAWwC,GAASC;IAAAA,KAC5B3B,EAAQtC,IAAIgD,GAAOtB;IAAAA,OAEjB;MAAA,IACCwC,IAAcC,EAAK7B,EAAQvC,IAAIiD;MAAAA,KAEhCtB,EAAKC,SAASD,EAAKD,QAAQyC,MAAgBxC,GAC9CyC,EAAK7B,EAAQ8B,OAAOpB,QACf,IAAItB,MAASwC,GAClBC,EAAK7B,EAAQtC,IAAIgD,GAAOtB,EAAKD;MAG/BG,GAAWF;IAAAA;EAAAA;EAAAA,EAIPwB,IAAR,WACE/F,GACAkH;IAAAA,IAEIC,IAAUtD,KAAKsB,EAAQvC,IAAI5C,MAAS;IAAA,OACrB,SAAZmH,GAAkB;MAAA,IACjB7C,IAAO6C,EAAQ7C,OAAOI,GAAgByC,EAAQ7C,QAAQ;MAC5D6C,EAAQjI,MAAMgI;MACdC,IAAU7C;IAAAA;EAAAA;EAAAA;IAAAA;IAAAA,KA1Hd;MAAA,OACST,KAAK4B;IAAAA;EAAAA;EAAAA;AAAAA;AAAAA,IC/GH2B;EAAAA;EAAAA;IAAAA;EAAAA;EAAAA;EAAAA,EAIXC;IAAA,IACQpE,IAAOY,KAAKyD;IAAAA,SACTrE,MAASA,EAAKO;EAAAA;EAAAA,EAIzB8D,6BAAgB1G,GAAgBT,GAAmB+D;IAAAA,IAC3CoC,IAAczC,KAAK3D,kBAAkBC;IAAAA,IACrCyE,IAASf,KAAa6C,SAAS9F,GAAQ0F,GAAapC;IAAAA,KAErD,IAAIxD,IAAI,GAAGC,IAASiE,EAAMjE,QAAQD,IAAIC,GAAQD,SAC7CkE,EAAMlE,GAAGqD,kBAAkB5D,WACtByE,EAAMlE;IAAAA,OAIV;EAAA;EAAA6G,EAGTC;IAAA,QACU3D,KAAKwD;EAAAA;EAAAA;AAAAA,EArBPnC;ACoBV,IAAMuC,KAAsB;EAC1BC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AAAAA;AAEF,IAAMC,KAAsB;EAC1BC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC,IAAIC;EACJC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AAAAA;AAAAA,IAeWC,KAA0B,SAA1BA,EAA2BC,GAAcC,GAAchI;EAAAA,OAAYiI,QACzElC,IAAwBgC,UACxBjB,IAAwBkB,IAC7BhI;AAAAA;AAAAA,IAGWkI,KAAoBD,EAAclC,IAAqBe;ACrFpE,IAAMqB,KAAuB;AAC7B,IAAMC,KAAa;AACnB,IAAMC,KAAe;AACrB,IAAMC,KAAa;AAEnB,SAASC,GAAoBC,GAAelF,GAAemF;EAAAA,IACnDC,IAA2B,QAAdD,EAAO,MAA2B,QAAbD,EAAM,MAA0C,QAA5BA,EAAMA,EAAMvJ,SAAS,KAC7E,MACA;EAAA,IACE0J,KAAmC,MAAzBH,EAAMnJ,QAAQ,QAAe,SAAS;EAAA,IAChDuJ,IAAUJ,EAAMK,QAAQP,IAAY,QACvCO,QAAQR,IAAcM,IAAUD;EAAAA,OAE5BpF,IAAQkF,EAAMvJ,WAAWwJ,EAAOxJ,iBAAe2J,WAAcA;AAAAA;AAGtE,SAASE,GAAaN,GAAelF,GAAemF;EAAAA,IACpC,QAAVD,MAAwC,QAAtBC,EAAOnF,IAAQ,MAAoC,QAAtBmF,EAAOnF,IAAQ,YACzDkF;EAAAA,cAGGA;AAAAA;AAGd,SAASO,GAAcvH;EAAAA,IACfwH,IAAWxH,EAAOT,IAAI;IAAAyB,OAASA,EAClCqG,QAAQV,IAAsBW,IAC9BD,QAAQT,IAAYG;EAAAA;EAAAA,IACjBK,IAAUI,EAAS/J,SAAS,YAAU+J,EAASnJ,KAAK,aAAUmJ,EAAS;EAAA,OAEtE,IAAIC,aAAWL;AAAAA;AAAAA,IAGXM,KAAoC,SAApCA,EAAqC1H;EAAAA,IAC5CoH;EAAAA,OAEG,UAACpG;IAAAA,IACiB,uBAAZoG,GACTA,IAAUpH,EAAO2H,MAAM;MAAAC,QAAyB,MAApBA,EAAE/J,QAAQ;IAAA,KAClC,OACA0J,GAAcvH;IAAAA,OAGD,SAAZoH,KACwB,MAA3BpH,EAAOnC,QAAQmD,KACfoG,EAAQS,KAAK7G;EAAAA;AAAAA;AAAAA,ICxCR8G;EAAAA;EAAAA,iBAICpG,GAAiClD;IAAAA,eAAjCkD,OAA6B;IAAA,eAAIlD,OAAgC;IAAA,OAC3EuJ,aAAMrG;MACJvB,mBAAmBuG;MACnBzG,cAAcyH;IAAAA,GACXlJ;EAAAA;EAAAA;AAAAA,EALC0F;AAAAA,ICIJ8D;EAAAA,WAGQjI;IAAAA,KACLkI,IAAQlI;EAAAA;EAAAA;EAAAA,EAGfmI,qBAAQ3H;IAAAA,KACD0H,EAAM1H,SAASA;IAAAA,OACbI;EAAAA;EAAAA;AAAAA;AAAAA,IAiDEwH;EAAAA,wBAICC;IAAAA,KAHL1G,QAAwB;IAAA,KAIxB2G,IAAeD;IAAAA,KACfjE,MAAMxD,KAAKwD,IAAImE,KAAK3H;IAAAA,KACpB2D,SAAS3D,KAAK2D,OAAOgE,KAAK3H;IAAAA,KAC1B4H,QAAQ5H,KAAK4H,MAAMD,KAAK3H;EAAAA;EAAAA;EAAAA,EAY/BwD,iBACEzG,GACAT,GACAuL,GACAtI;IAAAA,IAEMH,IAAO;MAAErC;IAAAA;IAAAA,IAEXT,GAAS;MACX8C,EAAK9C,UAAUA;MAAAA,IAEXhB,MAAMC,QAAQsM,MAAqD,oBAAvBA,GAC9CzI,EAAKC,SAASwI,OACT,IAAkC,uBAAvBA,GAChBzI,EAAKG,aAAasI;MAAAA,IAGM,uBAAftI,GACTH,EAAKG,aAAaA;IAAAA;IAAAA,KAIjBwB,MAAM3C,KAAKgB;IAAAA,OAET,IAAIiI,GAAYjI;EAAAA;EAAAA,EAYzBuE,oBACE5G,GACAT,GACAuL,GACAtI;IAAAA,IAEMuI,IAAW9H,KAAawD,IAAIzG,GAAQT,GAASuL,GAAoBtI;IACvEuI,EAAQR,EAAM3H,WAAW;IAAA,OAClBmI;EAAAA;EAAAA,EAGTF,mBAAM/J;IAAAA,OACG,IAAImC,KAAK0H,EAAa1H,KAAKe,OAAOlD;EAAAA;EAAAA;AAAAA;AAetC,SAASkK,cAEdC,GAAsCnK;EAAAA,IAChCiK,IAAU,IAAIN,GAAeL;EAAAA,IAC7Bc,IAASD,EAAOF,EAAQtE,KAAKsE,EAAQnE;EAAAA,IAEvCsE,KAAiC,sBAAhBA,EAAOC,aACnBD,EAAOC,KAAK;IAAA,OAAMJ,EAAQF,MAAM/J;EAAAA;EAAAA,OAGlCiK,EAAQF,MAAM/J;AAAAA;AAAAA,IC/JVsK,KAA0C,SAA1CA,EAA0CC;EAAAA,4BAA4BA,EAAMrL,oBAAeqL,EAAM3F;AAAAA;AAE9G,IAAM4F,KAAc,SAASC,EAAoBC;EAAAA,KAC1CA,UAAUA;AAAAA;AAGjBF,GAAYG,YAAY3M,OAAO4M,OAAO1M,MAAMyM;AAAAA,IAE/BE;EAAAA;EAAAA,eASJC,oBAAP,WAAyBC;IAAAA,KAClBC,IAA8C,oBAAhBD,IAA2B;MAAA,OAAMA;IAAAA,IAAcA;EAAAA;EAAAA,eAG7EE,OAAP,WAAkC7G;IAAAA,OACzB,IAAIjC,KAAQiC;EAAAA;EAAAA,wBAGDA;IAAAA;IAAAA,iBACZ;IAAApF,EACDoF,UAAUA;IAAAA,IAEwB,sBAA5BlG,MAAMgN,mBAAkC;MAAAlM,EAC5CV,OAAO;MACZJ,MAAMgN,wBAAwB5F,EAAK5G;IAAAA;IAAAA;EAAAA;EAAAA;EAAAA,EAIvCyM,wBAAWT;IAAAA,KACJA,UAAUA;IAAAA,OACRvI;EAAAA;EAAAA,EAGTiJ;IAAA;IAAA,IACQ7J,cAAY6C,SAAQwB;IAAAA,IAEtBrE,MAASA,EAAKO;IAAAA,KAIb5C;IAAAA,KACAT;IAAAA,KACAmG,cAAcrG,EAAmB4D,KAAKiC,QAAQ5F;IAAAA,KAC9CgE;IAAAA,IAECT,IAASR,IAAOA,EAAKQ,SAAS;IAAA,KAE/B2I,UAAUvI,KAAKuI,WAAW3I,KAAWI,KAAKzD,YAAoBsM,EAAqB7I;IAAAA,MAClFA;EAAAA;EAAAA;AAAAA,EA/CgDqI;AAA7CK,GAOJG,IAAuBV;AAAAA;EAAAA;AAAAA;AAAAA","names":["wrapArray","value","Array","isArray","TYPE_FIELD","setSubjectType","type","object","hasOwnProperty","Object","defineProperty","Error","isSubjectType","getSubjectClassName","modelName","name","getSubjectTypeName","detectSubjectType","subject","constructor","expandActions","aliasMap","rawActions","merge","actions","i","length","action","findDuplicate","actionToFind","indexOf","defaultAliasMerge","concat","validateForCycles","reservedAction","keys","mergeAliasesAndDetectCycles","duplicate","join","isUsingReservedAction","createAliasResolver","options","skipValidate","anyAction","copyArrayTo","dest","target","start","push","mergePrioritized","array","anotherArray","j","merged","priority","getOrDefault","map","key","defaultValue","get","set","identity","x","validate","rule","fields","fieldMatcher","conditions","conditionsMatcher","Rule","resolveAction","inverted","reason","undefined","_options","_conditionsMatcher","this","_matchConditions","matchesConditions","matches","matchesField","field","_matchField","ast","linkedItem","prev","item","next","unlinkItem","cloneLinkedItem","defaultActionEntry","rules","defaultSubjectEntry","Map","analyze","index","_hasPerFieldRules","RuleIndex","_events","_ruleOptions","_anyAction","_anySubjectType","anySubjectType","_detectSubjectType","_rules","_indexedRules","_buildIndexFor","update","event","ability","_emit","rawRules","indexedRules","subjects","k","subjectRules","possibleRulesFor","subjectType","actionRules","anyActionRules","has","rulesFor","filter","on","handler","tail","currentTail","_this","delete","payload","current","PureAbility","can","relevantRuleFor","r","cannot","defaultInstructions","$eq","$ne","$lt","$lte","$gt","$gte","$in","$nin","$all","$size","$regex","$options","$elemMatch","$exists","defaultInterpreters","eq","ne","lt","lte","gt","gte","in","within","nin","all","size","regex","elemMatch","exists","and","buildMongoQueryMatcher","instructions","interpreters","createFactory","mongoQueryMatcher","REGEXP_SPECIAL_CHARS","REGEXP_ANY","REGEXP_STARS","REGEXP_DOT","detectRegexpPattern","match","string","quantifier","matcher","pattern","replace","escapeRegexp","createPattern","patterns","RegExp","fieldPatternMatcher","every","f","test","Ability","_PureAbility","RuleBuilder","_rule","because","AbilityBuilder","AbilityType","_AbilityType","bind","build","conditionsOrFields","builder","defineAbility","define","result","then","getDefaultErrorMessage","error","NativeError","NError","message","prototype","create","ForbiddenError","setDefaultMessage","messageOrFn","_defaultErrorMessage","from","captureStackTrace","setMessage","throwUnlessCan"],"sources":["../../src/utils.ts","../../src/Rule.ts","../../src/structures/LinkedItem.ts","../../src/RuleIndex.ts","../../src/PureAbility.ts","../../src/matchers/conditions.ts","../../src/matchers/field.ts","../../src/Ability.ts","../../src/AbilityBuilder.ts","../../src/ForbiddenError.ts"],"sourcesContent":["import { AnyObject, Subject, SubjectType, SubjectClass, ForcedSubject, AliasesMap } from './types';\n\nexport function wrapArray<T>(value: T[] | T): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function setByPath(object: AnyObject, path: string, value: unknown): void {\n  let ref = object;\n  let lastKey = path;\n\n  if (path.indexOf('.') !== -1) {\n    const keys = path.split('.');\n\n    lastKey = keys.pop()!;\n    ref = keys.reduce((res, prop) => {\n      res[prop] = res[prop] || {};\n      return res[prop] as AnyObject;\n    }, object);\n  }\n\n  ref[lastKey] = value;\n}\n\nconst TYPE_FIELD = '__caslSubjectType__';\nexport function setSubjectType<\n  T extends string,\n  U extends Record<PropertyKey, any>\n>(type: T, object: U): U & ForcedSubject<T> {\n  if (object) {\n    if (!object.hasOwnProperty(TYPE_FIELD)) {\n      Object.defineProperty(object, TYPE_FIELD, { value: type });\n    } else if (type !== object[TYPE_FIELD]) {\n      throw new Error(`Trying to cast object to subject type ${type} but previously it was casted to ${object[TYPE_FIELD]}`);\n    }\n  }\n\n  return object as U & ForcedSubject<T>;\n}\n\nexport const isSubjectType = (value: unknown): value is SubjectType => {\n  const type = typeof value;\n  return type === 'string' || type === 'function';\n};\n\nconst getSubjectClassName = (value: SubjectClass) => value.modelName || value.name;\nexport const getSubjectTypeName = (value: SubjectType) => {\n  return typeof value === 'string' ? value : getSubjectClassName(value);\n};\n\nexport function detectSubjectType(subject: Exclude<Subject, SubjectType>): string {\n  if (subject.hasOwnProperty(TYPE_FIELD)) {\n    return (subject as any)[TYPE_FIELD];\n  }\n\n  return getSubjectClassName(subject.constructor as SubjectClass);\n}\n\ntype AliasMerge = (actions: string[], action: string | string[]) => string[];\nfunction expandActions(aliasMap: AliasesMap, rawActions: string | string[], merge: AliasMerge) {\n  let actions = wrapArray(rawActions);\n  let i = 0;\n\n  while (i < actions.length) {\n    const action = actions[i++];\n\n    if (aliasMap.hasOwnProperty(action)) {\n      actions = merge(actions, aliasMap[action]);\n    }\n  }\n\n  return actions;\n}\n\nfunction findDuplicate(actions: string[], actionToFind: string | string[]) {\n  if (typeof actionToFind === 'string' && actions.indexOf(actionToFind) !== -1) {\n    return actionToFind;\n  }\n\n  for (let i = 0; i < actionToFind.length; i++) {\n    if (actions.indexOf(actionToFind[i]) !== -1) return actionToFind[i];\n  }\n\n  return null;\n}\n\nconst defaultAliasMerge: AliasMerge = (actions, action) => actions.concat(action);\nfunction validateForCycles(aliasMap: AliasesMap, reservedAction: string) {\n  if (reservedAction in aliasMap) {\n    throw new Error(`Cannot use \"${reservedAction}\" as an alias because it's reserved action.`);\n  }\n\n  const keys = Object.keys(aliasMap);\n  const mergeAliasesAndDetectCycles: AliasMerge = (actions, action) => {\n    const duplicate = findDuplicate(actions, action);\n    if (duplicate) throw new Error(`Detected cycle ${duplicate} -> ${actions.join(', ')}`);\n\n    const isUsingReservedAction = typeof action === 'string' && action === reservedAction\n      || actions.indexOf(reservedAction) !== -1\n      || Array.isArray(action) && action.indexOf(reservedAction) !== -1;\n    if (isUsingReservedAction) throw new Error(`Cannot make an alias to \"${reservedAction}\" because this is reserved action`);\n\n    return actions.concat(action);\n  };\n\n  for (let i = 0; i < keys.length; i++) {\n    expandActions(aliasMap, keys[i], mergeAliasesAndDetectCycles);\n  }\n}\n\nexport type AliasResolverOptions = { skipValidate?: boolean; anyAction?: string };\nexport function createAliasResolver(aliasMap: AliasesMap, options?: AliasResolverOptions) {\n  if (!options || options.skipValidate !== false) {\n    validateForCycles(aliasMap, options && options.anyAction || 'manage');\n  }\n\n  return (action: string | string[]) => expandActions(aliasMap, action, defaultAliasMerge);\n}\n\nfunction copyArrayTo<T>(dest: T[], target: T[], start: number) {\n  for (let i = start; i < target.length; i++) {\n    dest.push(target[i]);\n  }\n}\n\nexport function mergePrioritized<T extends { priority: number }>(\n  array?: T[],\n  anotherArray?: T[]\n): T[] {\n  if (!array || !array.length) {\n    return anotherArray || [];\n  }\n\n  if (!anotherArray || !anotherArray.length) {\n    return array || [];\n  }\n\n  let i = 0;\n  let j = 0;\n  const merged: T[] = [];\n\n  while (i < array.length && j < anotherArray.length) {\n    if (array[i].priority < anotherArray[j].priority) {\n      merged.push(array[i]);\n      i++;\n    } else {\n      merged.push(anotherArray[j]);\n      j++;\n    }\n  }\n\n  copyArrayTo(merged, array, i);\n  copyArrayTo(merged, anotherArray, j);\n\n  return merged;\n}\n\nexport function getOrDefault<K, V>(map: Map<K, V>, key: K, defaultValue: () => V) {\n  let value = map.get(key);\n\n  if (!value) {\n    value = defaultValue();\n    map.set(key, value);\n  }\n\n  return value;\n}\n\nexport const identity = <T>(x: T) => x;\n","import { wrapArray, isSubjectType } from './utils';\nimport {\n  MatchConditions,\n  MatchField,\n  Abilities,\n  ToAbilityTypes,\n  Normalize,\n  ConditionsMatcher,\n  FieldMatcher,\n} from './types';\nimport { RawRule, RawRuleFrom } from './RawRule';\n\ntype Tuple<A extends Abilities> = Normalize<ToAbilityTypes<A>>;\n\nfunction validate(rule: RawRuleFrom<Abilities, any>, options: RuleOptions<any>) {\n  if (Array.isArray(rule.fields) && !rule.fields.length) {\n    throw new Error('`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa');\n  }\n\n  if (rule.fields && !options.fieldMatcher) {\n    throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  }\n\n  if (rule.conditions && !options.conditionsMatcher) {\n    throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n  }\n}\n\nexport interface RuleOptions<Conditions> {\n  conditionsMatcher?: ConditionsMatcher<Conditions>\n  fieldMatcher?: FieldMatcher\n  resolveAction(action: string | string[]): string | string[]\n}\n\nexport class Rule<A extends Abilities, C> {\n  private _matchConditions: MatchConditions | undefined;\n  private _matchField: MatchField<string> | undefined;\n  private readonly _options!: RuleOptions<C>;\n  public readonly action!: Tuple<A>[0] | Tuple<A>[0][];\n  public readonly subject!: Tuple<A>[1] | Tuple<A>[1][];\n  public readonly inverted!: boolean;\n  public readonly conditions!: C | undefined;\n  public readonly fields!: string[] | undefined;\n  public readonly reason!: string | undefined;\n  public readonly priority!: number;\n\n  constructor(\n    rule: RawRule<ToAbilityTypes<A>, C>,\n    options: RuleOptions<C>,\n    priority: number = 0\n  ) {\n    validate(rule, options);\n\n    this.action = options.resolveAction(rule.action);\n    this.subject = rule.subject!;\n    this.inverted = !!rule.inverted;\n    this.conditions = rule.conditions;\n    this.reason = rule.reason;\n    this.fields = rule.fields ? wrapArray(rule.fields) : undefined;\n    this.priority = priority;\n    this._options = options;\n  }\n\n  private _conditionsMatcher() {\n    if (this.conditions && !this._matchConditions) {\n      this._matchConditions = this._options.conditionsMatcher!(this.conditions);\n    }\n\n    return this._matchConditions!;\n  }\n\n  get ast() {\n    const matches = this._conditionsMatcher();\n    return matches ? matches.ast : undefined;\n  }\n\n  matchesConditions(object: Normalize<A>[1] | undefined): boolean {\n    if (!this.conditions) {\n      return true;\n    }\n\n    if (!object || isSubjectType(object)) {\n      return !this.inverted;\n    }\n\n    const matches = this._conditionsMatcher();\n    return matches(object as Record<string, unknown>);\n  }\n\n  matchesField(field: string | undefined): boolean {\n    if (!this.fields) {\n      return true;\n    }\n\n    if (!field) {\n      return !this.inverted;\n    }\n\n    if (this.fields && !this._matchField) {\n      this._matchField = this._options.fieldMatcher!(this.fields);\n    }\n\n    return this._matchField!(field);\n  }\n}\n","export interface LinkedItem<T> {\n  next: LinkedItem<T> | null\n  prev: LinkedItem<T> | null\n  readonly value: T\n}\n\nexport function linkedItem<T>(value: T, prev: LinkedItem<T>['prev']) {\n  const item = { value, prev, next: null };\n\n  if (prev) {\n    prev.next = item;\n  }\n\n  return item;\n}\n\nexport function unlinkItem(item: LinkedItem<any>) {\n  if (item.next) {\n    item.next.prev = item.prev;\n  }\n\n  if (item.prev) {\n    item.prev.next = item.next;\n  }\n\n  item.next = item.prev = null; // eslint-disable-line\n}\n\nexport const cloneLinkedItem = <T extends LinkedItem<any>>(item: T): T => ({\n  value: item.value,\n  prev: item.prev,\n  next: item.next,\n} as T);\n","import { Rule, RuleOptions } from './Rule';\nimport { RawRuleFrom } from './RawRule';\nimport {\n  Abilities,\n  Normalize,\n  SubjectType,\n  AbilityParameters,\n  AbilityTuple,\n  ExtractSubjectType\n} from './types';\nimport { wrapArray, detectSubjectType, mergePrioritized, getOrDefault, identity, isSubjectType } from './utils';\nimport { LinkedItem, linkedItem, unlinkItem, cloneLinkedItem } from './structures/LinkedItem';\n\nexport interface RuleIndexOptions<A extends Abilities, C> extends Partial<RuleOptions<C>> {\n  detectSubjectType?(\n    subject: Exclude<Normalize<A>[1], SubjectType>\n  ): ExtractSubjectType<Normalize<A>[1]>;\n  anyAction?: string;\n  anySubjectType?: string;\n}\n\ndeclare const $abilities: unique symbol;\ndeclare const $conditions: unique symbol;\ninterface WithGenerics {\n  [$abilities]: any\n  [$conditions]: any\n}\nexport type Public<T extends WithGenerics> = { [K in keyof T]: T[K] };\nexport interface Generics<T extends WithGenerics> {\n  abilities: T[typeof $abilities],\n  conditions: T[typeof $conditions]\n}\n\nexport type RuleOf<T extends WithGenerics> =\n  Rule<Generics<T>['abilities'], Generics<T>['conditions']>;\nexport type RawRuleOf<T extends WithGenerics> =\n  RawRuleFrom<Generics<T>['abilities'], Generics<T>['conditions']>;\n\nexport type RuleIndexOptionsOf<T extends WithGenerics> =\n  RuleIndexOptions<Generics<T>['abilities'], Generics<T>['conditions']>;\n\ninterface AbilityEvent<T extends WithGenerics> {\n  target: T\n  /** @deprecated use \"target\" property instead */\n  ability: T\n}\n\nexport interface UpdateEvent<T extends WithGenerics> extends AbilityEvent<T> {\n  rules: RawRuleOf<T>[]\n}\n/**\n * @deprecated `on`/`emit` properly infer type without this type\n * TODO(major): delete\n */\nexport type EventHandler<Event> = (event: Event) => void;\n\nexport type Events<\n  T extends WithGenerics,\n  K extends keyof EventsMap<T> = keyof EventsMap<T>\n> = Map<K, LinkedItem<EventsMap<T>[K]> | null>;\n\ninterface EventsMap<T extends WithGenerics> {\n  update(event: UpdateEvent<T>): void\n  updated(event: UpdateEvent<T>): void\n}\n\ntype IndexTree<A extends Abilities, C> = Map<SubjectType, Map<string, {\n  rules: Rule<A, C>[],\n  merged: boolean\n}>>;\n\nexport type Unsubscribe = () => void;\n\nconst defaultActionEntry = () => ({\n  rules: [] as unknown as Rule<any, any>[],\n  merged: false\n});\nconst defaultSubjectEntry = () => new Map<string, ReturnType<typeof defaultActionEntry>>();\nconst analyze = (index: any, rule: Rule<any, any>) => {\n  if (!index._hasPerFieldRules && rule.fields) {\n    index._hasPerFieldRules = true;\n  }\n};\n\ntype AbilitySubjectTypeParameters<T extends Abilities, IncludeField extends boolean = true> =\n  AbilityParameters<\n  T,\n  T extends AbilityTuple\n    ? IncludeField extends true\n      ? (action: T[0], subject: ExtractSubjectType<T[1]>, field?: string) => 0\n      : (action: T[0], subject: ExtractSubjectType<T[1]>) => 0\n    : never,\n  (action: Extract<T, string>) => 0\n  >;\n\nexport class RuleIndex<A extends Abilities, Conditions> {\n  private _hasPerFieldRules: boolean = false;\n  private _events: Events<this> = new Map();\n  private _indexedRules!: IndexTree<A, Conditions>;\n  private _rules!: RawRuleFrom<A, Conditions>[];\n  private readonly _ruleOptions!: RuleOptions<Conditions>;\n  private readonly _detectSubjectType!: Required<RuleIndexOptions<A, Conditions>>['detectSubjectType'];\n  private readonly _anyAction: string;\n  private readonly _anySubjectType: string;\n  readonly [$abilities]!: A;\n  readonly [$conditions]!: Conditions;\n\n  constructor(\n    rules: RawRuleFrom<A, Conditions>[] = [],\n    options: RuleIndexOptions<A, Conditions> = {}\n  ) {\n    this._ruleOptions = {\n      conditionsMatcher: options.conditionsMatcher,\n      fieldMatcher: options.fieldMatcher,\n      resolveAction: options.resolveAction || identity,\n    };\n    this._anyAction = options.anyAction || 'manage';\n    this._anySubjectType = options.anySubjectType || 'all';\n    this._detectSubjectType = options.detectSubjectType || detectSubjectType;\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n  }\n\n  get rules() {\n    return this._rules;\n  }\n\n  detectSubjectType(object?: Normalize<A>[1]): ExtractSubjectType<Normalize<A>[1]> {\n    if (isSubjectType(object)) return object;\n    if (!object) return this._anySubjectType;\n    return this._detectSubjectType(object as Exclude<Normalize<A>[1], SubjectType>);\n  }\n\n  update(rules: RawRuleFrom<A, Conditions>[]): Public<this> {\n    const event = {\n      rules,\n      ability: this,\n      target: this\n    } as unknown as UpdateEvent<this>;\n\n    this._emit('update', event);\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n    this._emit('updated', event);\n\n    return this;\n  }\n\n  private _buildIndexFor(rawRules: RawRuleFrom<A, Conditions>[]) {\n    const indexedRules: IndexTree<A, Conditions> = new Map();\n\n    for (let i = rawRules.length - 1; i >= 0; i--) {\n      const priority = rawRules.length - i - 1;\n      const rule = new Rule(rawRules[i], this._ruleOptions, priority);\n      const actions = wrapArray(rule.action);\n      const subjects = wrapArray(rule.subject || this._anySubjectType);\n      analyze(this, rule);\n\n      for (let k = 0; k < subjects.length; k++) {\n        const subjectRules = getOrDefault(indexedRules, subjects[k], defaultSubjectEntry);\n\n        for (let j = 0; j < actions.length; j++) {\n          getOrDefault(subjectRules, actions[j], defaultActionEntry).rules.push(rule);\n        }\n      }\n    }\n\n    return indexedRules;\n  }\n\n  possibleRulesFor(...args: AbilitySubjectTypeParameters<A, false>): Rule<A, Conditions>[]\n  possibleRulesFor(\n    action: string,\n    subjectType: SubjectType = this._anySubjectType\n  ): Rule<A, Conditions>[] {\n    if (!isSubjectType(subjectType)) {\n      throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    }\n\n    const subjectRules = getOrDefault(this._indexedRules, subjectType, defaultSubjectEntry);\n    const actionRules = getOrDefault(subjectRules, action, defaultActionEntry);\n\n    if (actionRules.merged) {\n      return actionRules.rules;\n    }\n\n    const anyActionRules = action !== this._anyAction && subjectRules.has(this._anyAction)\n      ? subjectRules.get(this._anyAction)!.rules\n      : undefined;\n    let rules = mergePrioritized(actionRules.rules, anyActionRules);\n\n    if (subjectType !== this._anySubjectType) {\n      rules = mergePrioritized(rules, (this as any).possibleRulesFor(action, this._anySubjectType));\n    }\n\n    actionRules.rules = rules;\n    actionRules.merged = true;\n\n    return rules;\n  }\n\n  rulesFor(...args: AbilitySubjectTypeParameters<A>): Rule<A, Conditions>[]\n  rulesFor(action: string, subjectType?: SubjectType, field?: string): Rule<A, Conditions>[] {\n    const rules: Rule<A, Conditions>[] = (this as any).possibleRulesFor(action, subjectType);\n\n    if (field && typeof field !== 'string') {\n      throw new Error('The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details');\n    }\n\n    if (!this._hasPerFieldRules) {\n      return rules;\n    }\n\n    return rules.filter(rule => rule.matchesField(field));\n  }\n\n  on<T extends keyof EventsMap<this>>(\n    event: T,\n    handler: EventsMap<Public<this>>[T]\n  ): Unsubscribe {\n    const tail = this._events.get(event) || null;\n    const item = linkedItem(handler, tail);\n    this._events.set(event, item);\n\n    return () => {\n      const currentTail = this._events.get(event);\n\n      if (!item.next && !item.prev && currentTail === item) {\n        this._events.delete(event);\n      } else if (item === currentTail) {\n        this._events.set(event, item.prev);\n      }\n\n      unlinkItem(item);\n    };\n  }\n\n  private _emit<T extends keyof EventsMap<this>>(\n    name: T,\n    payload: Parameters<EventsMap<this>[T]>[0]\n  ) {\n    let current = this._events.get(name) || null;\n    while (current !== null) {\n      const prev = current.prev ? cloneLinkedItem(current.prev) : null;\n      current.value(payload);\n      current = prev;\n    }\n  }\n}\n","import { RuleIndex, RuleIndexOptions, RuleIndexOptionsOf, Public, RawRuleOf } from './RuleIndex';\nimport { Abilities, AbilityTuple, CanParameters, Subject } from './types';\nimport { Rule } from './Rule';\n\nexport interface AbilityOptions<A extends Abilities, Conditions>\n  extends RuleIndexOptions<A, Conditions> {}\nexport interface AnyAbility extends Public<PureAbility<any, any>> {}\nexport interface AbilityOptionsOf<T extends AnyAbility> extends RuleIndexOptionsOf<T> {}\nexport type AbilityClass<T extends AnyAbility> = new (\n  rules?: RawRuleOf<T>[],\n  options?: AbilityOptionsOf<T>\n) => T;\n\nexport class PureAbility<\n  A extends Abilities = AbilityTuple,\n  Conditions = unknown\n> extends RuleIndex<A, Conditions> {\n  can(...args: CanParameters<A>): boolean {\n    const rule = this.relevantRuleFor(...args);\n    return !!rule && !rule.inverted;\n  }\n\n  relevantRuleFor(...args: CanParameters<A>): Rule<A, Conditions> | null\n  relevantRuleFor(action: string, subject?: Subject, field?: string): Rule<A, Conditions> | null {\n    const subjectType = this.detectSubjectType(subject);\n    const rules = (this as any).rulesFor(action, subjectType, field);\n\n    for (let i = 0, length = rules.length; i < length; i++) {\n      if (rules[i].matchesConditions(subject)) {\n        return rules[i];\n      }\n    }\n\n    return null;\n  }\n\n  cannot(...args: CanParameters<A>): boolean {\n    return !this.can(...args);\n  }\n}\n","import {\n  $eq,\n  eq,\n  $ne,\n  ne,\n  $lt,\n  lt,\n  $lte,\n  lte,\n  $gt,\n  gt,\n  $gte,\n  gte,\n  $in,\n  within,\n  $nin,\n  nin,\n  $all,\n  all,\n  $size,\n  size,\n  $regex,\n  $options,\n  regex,\n  $elemMatch,\n  elemMatch,\n  $exists,\n  exists,\n  and,\n  createFactory,\n  BuildMongoQuery,\n  DefaultOperators,\n} from '@ucast/mongo2js';\nimport { ConditionsMatcher, AnyObject } from '../types';\nimport { Container, GenericFactory } from '../hkt';\n\nconst defaultInstructions = {\n  $eq,\n  $ne,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $in,\n  $nin,\n  $all,\n  $size,\n  $regex,\n  $options,\n  $elemMatch,\n  $exists,\n};\nconst defaultInterpreters = {\n  eq,\n  ne,\n  lt,\n  lte,\n  gt,\n  gte,\n  in: within,\n  nin,\n  all,\n  size,\n  regex,\n  elemMatch,\n  exists,\n  and,\n};\n\ninterface MongoQueryFactory extends GenericFactory {\n  produce: MongoQuery<this[0]>\n}\n\ntype MergeUnion<T extends {}, Keys extends keyof T = keyof T> = { [K in Keys]: T[K] };\nexport type MongoQuery<T = AnyObject> = BuildMongoQuery<MergeUnion<T>, {\n  toplevel: {},\n  field: Pick<DefaultOperators<MergeUnion<T>>['field'], keyof typeof defaultInstructions>\n}> & Container<MongoQueryFactory>;\n\ntype MongoQueryMatcherFactory =\n  (...args: Partial<Parameters<typeof createFactory>>) => ConditionsMatcher<MongoQuery>;\nexport const buildMongoQueryMatcher = ((instructions, interpreters, options) => createFactory(\n  { ...defaultInstructions, ...instructions },\n  { ...defaultInterpreters, ...interpreters },\n  options\n)) as MongoQueryMatcherFactory;\n\nexport const mongoQueryMatcher = createFactory(defaultInstructions, defaultInterpreters);\nexport type {\n  MongoQueryFieldOperators,\n  MongoQueryTopLevelOperators,\n  MongoQueryOperators,\n} from '@ucast/mongo2js';\n","import { FieldMatcher } from '../types';\n\nconst REGEXP_SPECIAL_CHARS = /[-/\\\\^$+?.()|[\\]{}]/g;\nconst REGEXP_ANY = /\\.?\\*+\\.?/g;\nconst REGEXP_STARS = /\\*+/;\nconst REGEXP_DOT = /\\./g;\n\nfunction detectRegexpPattern(match: string, index: number, string: string): string {\n  const quantifier = string[0] === '*' || match[0] === '.' && match[match.length - 1] === '.'\n    ? '+'\n    : '*';\n  const matcher = match.indexOf('**') === -1 ? '[^.]' : '.';\n  const pattern = match.replace(REGEXP_DOT, '\\\\$&')\n    .replace(REGEXP_STARS, matcher + quantifier);\n\n  return index + match.length === string.length ? `(?:${pattern})?` : pattern;\n}\n\nfunction escapeRegexp(match: string, index: number, string: string): string {\n  if (match === '.' && (string[index - 1] === '*' || string[index + 1] === '*')) {\n    return match;\n  }\n\n  return `\\\\${match}`;\n}\n\nfunction createPattern(fields: string[]) {\n  const patterns = fields.map(field => field\n    .replace(REGEXP_SPECIAL_CHARS, escapeRegexp)\n    .replace(REGEXP_ANY, detectRegexpPattern));\n  const pattern = patterns.length > 1 ? `(?:${patterns.join('|')})` : patterns[0];\n\n  return new RegExp(`^${pattern}$`);\n}\n\nexport const fieldPatternMatcher: FieldMatcher = (fields) => {\n  let pattern: RegExp | null;\n\n  return (field) => {\n    if (typeof pattern === 'undefined') {\n      pattern = fields.every(f => f.indexOf('*') === -1)\n        ? null\n        : createPattern(fields);\n    }\n\n    return pattern === null\n      ? fields.indexOf(field) !== -1\n      : pattern.test(field);\n  };\n};\n","import { PureAbility, AbilityOptions } from './PureAbility';\nimport { RawRuleFrom } from './RawRule';\nimport { AbilityTuple } from './types';\nimport { MongoQuery, mongoQueryMatcher } from './matchers/conditions';\nimport { fieldPatternMatcher } from './matchers/field';\nimport { Public } from './RuleIndex';\n\nexport class Ability<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery = MongoQuery\n> extends PureAbility<A, C> {\n  constructor(rules: RawRuleFrom<A, C>[] = [], options: AbilityOptions<A, C> = {}) {\n    super(rules, {\n      conditionsMatcher: mongoQueryMatcher,\n      fieldMatcher: fieldPatternMatcher,\n      ...options,\n    });\n  }\n}\n\nexport interface AnyMongoAbility extends Public<Ability<any, MongoQuery>> {}\n","import { Ability, AnyMongoAbility } from './Ability';\nimport { AnyAbility, AbilityOptionsOf, AbilityClass } from './PureAbility';\nimport { RawRuleOf, Generics } from './RuleIndex';\nimport {\n  ExtractSubjectType as E,\n  AbilityTuple,\n  SubjectType,\n  TaggedInterface,\n  Normalize,\n  AnyObject,\n  AnyClass,\n} from './types';\nimport { ProduceGeneric } from './hkt';\n\nclass RuleBuilder<T extends AnyAbility> {\n  public _rule!: RawRuleOf<T>;\n\n  constructor(rule: RawRuleOf<T>) {\n    this._rule = rule;\n  }\n\n  because(reason: string): this {\n    this._rule.reason = reason;\n    return this;\n  }\n}\n\ntype InstanceOf<T extends AnyAbility, S extends SubjectType> = S extends AnyClass<infer R>\n  ? R\n  : S extends string\n    ? Exclude<Normalize<Generics<T>['abilities']>[1], SubjectType> extends TaggedInterface<string>\n      ? Extract<Normalize<Generics<T>['abilities']>[1], TaggedInterface<S>>\n      : AnyObject\n    : never;\ntype ConditionsOf<T extends AnyAbility, I extends {}> =\n  ProduceGeneric<Generics<T>['conditions'], I>;\ntype ActionFrom<T extends AbilityTuple, S extends SubjectType> = T extends any\n  ? S extends T[1] ? T[0] : never\n  : never;\ntype ActionOf<T extends AnyAbility, S extends SubjectType> = ActionFrom<Generics<T>['abilities'], S>;\ntype SubjectTypeOf<T extends AnyAbility> = E<Normalize<Generics<T>['abilities']>[1]>;\n\ntype SimpleCanParams<T extends AnyAbility> = Parameters<(\n  action: Generics<T>['abilities'] | Generics<T>['abilities'][]\n) => 0>;\ntype BuilderCanParameters<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\n\ntype BuilderCanParametersWithFields<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  F extends string,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    fields?: F | F[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\ntype Keys<T> = string & keyof T;\n\nexport class AbilityBuilder<T extends AnyAbility> {\n  public rules: RawRuleOf<T>[] = [];\n  private _AbilityType!: AnyClass<T>;\n\n  constructor(AbilityType: AnyClass<T>) {\n    this._AbilityType = AbilityType;\n    this.can = this.can.bind(this as any);\n    this.cannot = this.cannot.bind(this as any);\n    this.build = this.build.bind(this as any);\n  }\n\n  can<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  can<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  can(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions']\n  ): RuleBuilder<T> {\n    const rule = { action } as RawRuleOf<T>;\n\n    if (subject) {\n      rule.subject = subject;\n\n      if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {\n        rule.fields = conditionsOrFields;\n      } else if (typeof conditionsOrFields !== 'undefined') {\n        rule.conditions = conditionsOrFields;\n      }\n\n      if (typeof conditions !== 'undefined') {\n        rule.conditions = conditions;\n      }\n    }\n\n    this.rules.push(rule);\n\n    return new RuleBuilder(rule);\n  }\n\n  cannot<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  cannot<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  cannot(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions'],\n  ): RuleBuilder<T> {\n    const builder = (this as any).can(action, subject, conditionsOrFields, conditions);\n    builder._rule.inverted = true;\n    return builder;\n  }\n\n  build(options?: AbilityOptionsOf<T>) {\n    return new this._AbilityType(this.rules, options);\n  }\n}\n\ntype DSL<T extends AnyAbility, R> = (\n  can: AbilityBuilder<T>['can'],\n  cannot: AbilityBuilder<T>['cannot']\n) => R;\n\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, Promise<void>>, options?: AbilityOptionsOf<T>): Promise<T>;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void>, options?: AbilityOptionsOf<T>): T;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void | Promise<void>>, options?: AbilityOptionsOf<T>): T | Promise<T> {\n  const builder = new AbilityBuilder(Ability as unknown as AbilityClass<T>);\n  const result = define(builder.can, builder.cannot);\n\n  if (result && typeof result.then === 'function') {\n    return result.then(() => builder.build(options));\n  }\n\n  return builder.build(options);\n}\n","import { AnyAbility } from './PureAbility';\nimport { Normalize } from './types';\nimport { Generics } from './RuleIndex';\nimport { getSubjectTypeName } from './utils';\n\nexport type GetErrorMessage = (error: ForbiddenError<AnyAbility>) => string;\nexport const getDefaultErrorMessage: GetErrorMessage = error => `Cannot execute \"${error.action}\" on \"${error.subjectType}\"`;\n\nconst NativeError = function NError(this: Error, message: string) {\n  this.message = message;\n} as unknown as new (message: string) => Error;\n\nNativeError.prototype = Object.create(Error.prototype);\n\nexport class ForbiddenError<T extends AnyAbility> extends NativeError {\n  public readonly ability!: T;\n  public action!: Normalize<Generics<T>['abilities']>[0];\n  public subject!: Generics<T>['abilities'][1];\n  public field?: string;\n  public subjectType!: string;\n\n  static _defaultErrorMessage = getDefaultErrorMessage;\n\n  static setDefaultMessage(messageOrFn: string | GetErrorMessage) {\n    this._defaultErrorMessage = typeof messageOrFn === 'string' ? () => messageOrFn : messageOrFn;\n  }\n\n  static from<U extends AnyAbility>(ability: U) {\n    return new this<U>(ability);\n  }\n\n  private constructor(ability: T) {\n    super('');\n    this.ability = ability;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      this.name = 'ForbiddenError';\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  setMessage(message: string) {\n    this.message = message;\n    return this;\n  }\n\n  throwUnlessCan(...args: Parameters<T['can']>) {\n    const rule = this.ability.relevantRuleFor(...args);\n\n    if (rule && !rule.inverted) {\n      return;\n    }\n\n    this.action = args[0];\n    this.subject = args[1];\n    this.subjectType = getSubjectTypeName(this.ability.detectSubjectType(args[1]));\n    this.field = args[2];\n\n    const reason = rule ? rule.reason : '';\n    // eslint-disable-next-line no-underscore-dangle\n    this.message = this.message || reason || (this.constructor as any)._defaultErrorMessage(this);\n    throw this; // eslint-disable-line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}