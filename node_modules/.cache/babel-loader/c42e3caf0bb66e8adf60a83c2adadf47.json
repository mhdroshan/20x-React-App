{"ast":null,"code":"import t, { Fragment as n, createElement as r, Children as i, PureComponent as u } from \"react\";\nfunction e(t, n) {\n  for (var r = 0; r < n.length; r++) {\n    var i = n[r];\n    i.enumerable = i.enumerable || false;\n    i.configurable = true;\n    if (\"value\" in i) i.writable = true;\n    Object.defineProperty(t, i.key, i);\n  }\n}\nfunction o(t, n, r) {\n  if (n) e(t.prototype, n);\n  if (r) e(t, r);\n  return t;\n}\nfunction f() {\n  f = Object.assign || function (t) {\n    for (var n = 1; n < arguments.length; n++) {\n      var r = arguments[n];\n      for (var i in r) if (Object.prototype.hasOwnProperty.call(r, i)) t[i] = r[i];\n    }\n    return t;\n  };\n  return f.apply(this, arguments);\n}\nfunction c(t, n) {\n  t.prototype = Object.create(n.prototype);\n  t.prototype.constructor = t;\n  a(t, n);\n}\nfunction a(t, n) {\n  a = Object.setPrototypeOf || function t(n, r) {\n    n.__proto__ = r;\n    return n;\n  };\n  return a(t, n);\n}\nvar s = function t() {};\nvar h = n ? function (t) {\n  if (!t) return null;\n  return t.length > 1 ? r.apply(void 0, [n, null].concat(t)) : i.only(t);\n} : i.only;\nvar l = function (t) {\n  c(n, t);\n  function n() {\n    var n;\n    for (var r = arguments.length, i = new Array(r), u = 0; u < r; u++) i[u] = arguments[u];\n    n = t.call.apply(t, [this].concat(i)) || this;\n    n.t = false;\n    n.i = null;\n    n.u = s;\n    return n;\n  }\n  var r = n.prototype;\n  r.componentWillUnmount = function t() {\n    this.u();\n  };\n  r.o = function _connectToAbility(t) {\n    var n = this;\n    if (t === this.i) return;\n    this.u();\n    this.i = null;\n    if (t) {\n      this.i = t;\n      this.u = t.on(\"updated\", function () {\n        return n.forceUpdate();\n      });\n    }\n  };\n  r.h = function t() {\n    var n = this.props;\n    var r = n.of || n.a || n.an || n.this || n.on;\n    var i = n.not ? \"cannot\" : \"can\";\n    return n.ability[i](n.I || n.do, r, n.field);\n  };\n  r.render = function t() {\n    this.o(this.props.ability);\n    this.t = this.h();\n    return this.props.passThrough || this.t ? this.l() : null;\n  };\n  r.l = function t() {\n    var n = this.props,\n      r = n.children,\n      i = n.ability;\n    var u = \"function\" === typeof r ? r(this.t, i) : r;\n    return h(u);\n  };\n  o(n, [{\n    key: \"allowed\",\n    get: function t() {\n      return this.t;\n    }\n  }]);\n  return n;\n}(u);\nfunction v(t) {\n  var n, r;\n  return r = n = function (t) {\n    c(n, t);\n    function n() {\n      return t.apply(this, arguments) || this;\n    }\n    return n;\n  }(l), n.defaultProps = {\n    ability: t\n  }, r;\n}\nfunction b(t) {\n  return function (n) {\n    return r(t, null, function (t) {\n      return r(l, f({\n        ability: t\n      }, n));\n    });\n  };\n}\nfunction useAbility(n) {\n  if (\"production\" !== process.env.NODE_ENV && \"function\" !== typeof t.useContext) throw new Error(\"You must use React >= 16.8 in order to use useAbility()\");\n  var r = t.useContext(n);\n  var i = t.useState(),\n    u = i[0],\n    e = i[1];\n  t.useEffect(function () {\n    return r.on(\"updated\", function (t) {\n      if (t.rules !== u) e(t.rules);\n    });\n  }, []);\n  return r;\n}\nexport { l as Can, v as createCanBoundTo, b as createContextualCan, useAbility };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,IAAMA,IAAO,SAAPA;AACN,IAAMC,IAAiBC,IACnB,UAACC;EAAAA,KACIA,UACI;EAAA,OAGFA,EAASC,SAAS,IACrBC,iBAAcH,GAAU,aAASC,MACjCG,EAASC,KAAKJ;AAAAA,IAElBG,EAASC;AAAAA,IA8BAC;EAAAA;EAAAA;IAAAA;IAAAA;IAAAA;IAAAA,EAIHC,IAAsB;IAAAC,EACtBC,IAAqB;IAAAD,EACrBE,IAAuCZ;IAAAA;EAAAA;EAAAA;EAAAA,EAE/Ca;IAAA,KACOD;EAAAA;EAAAA,EAGCE,IAAR,2BAA0BC;IAAAA;IAAAA,IACpBA,MAAYC,KAAKL;IAAAA,KAIhBC;IAAAA,KACAD,IAAW;IAAA,IAEZI,GAAS;MAAA,KACNJ,IAAWI;MAAAA,KACXH,IAA0BG,EAAQE,GAAG,WAAW;QAAA,OAAMC,EAAKC;MAAAA;IAAAA;EAAAA;EAAAA,EAQ5DC,IAAR;IAAA,IACQC,IAAaL,KAAKK;IAAAA,IAClBC,IAAUD,EAAME,MAAMF,EAAMG,KAAKH,EAAMI,MAAMJ,EAAML,QAAQK,EAAMJ;IAAAA,IACjES,IAAML,EAAMM,MAAM,WAAW;IAAA,OAE5BN,EAAMN,QAAQW,GAAKL,EAAMO,KAAKP,EAAMQ,IAAIP,GAASD,EAAMS;EAAAA;EAAAA,EAGhEC;IAAA,KACOjB,EAAkBE,KAAKK,MAAMN;IAAAA,KAC7BN,IAAaO,KAAKI;IAAAA,OAChBJ,KAAKK,MAAMW,eAAehB,KAAKP,IAAaO,KAAKiB,MAAoB;EAAA;EAAAC,EAGtED,IAAR;IAAA,QACgCjB,KAAKK;MAA3BlB;MAAUY;IAAAA,IACZoB,IAA+B,sBAAbhC,IACpBA,EAASa,KAAKP,GAAYM,KAC1BZ;IAAAA,OAEGF,EAAekC;EAAAA;EAAAA;IAAAA;IAAAA,KAxBxB;MAAA,OACSnB,KAAKP;IAAAA;EAAAA;EAAAA;AAAAA,EAxBN2B;AC/CH,SAASC,EAAuCtB;EAAAA;EAAAA;IAAAA;IAAAA;MAAAA;IAAAA;IAAAA;EAAAA,EAChCP,MACZ8B,eAAe;IAAEvB;EAAAA;AAAAA;AAIrB,SAASwB,EACdC;EAAAA,OAEO,UAACnB;IAAAA,OAA4BoB,EAAED,GAAQ,MAAM,UAACzB;MAAAA,OAAe0B,EAAEjC;QACpEO;MAAAA,GACGM;IAAAA;EAAAA;AAAAA;AChBA,SAASqB,WAAiCC;EAAAA,IAClB,iBAAzBC,QAAQC,IAAIC,YAAyD,sBAArBC,EAAMC,kBAElD,IAAIC,MAAM;EAAA,IAGZlC,IAAUgC,EAAMC,WAAcL;EAAAA,QACVI,EAAMG;IAAzBC;IAAOC;EAEdL,EAAMM,UAAU;IAAA,OAAMtC,EAAQE,GAAG,WAAW,UAACqC;MAAAA,IACvCA,EAAMH,UAAUA,GAClBC,EAASE,EAAMH;IAAAA;EAAAA,GAEf;EAAA,OAEGpC;AAAAA;AAAAA","names":["noop","renderChildren","Fragment","children","length","createElement","Children","only","Can","_isAllowed","n","_ability","_unsubscribeFromAbility","componentWillUnmount","_connectToAbility","ability","this","on","_this2","forceUpdate","_canRender","props","subject","of","a","an","can","not","I","do","field","render","passThrough","_renderChildren","r","elements","PureComponent","createCanBoundTo","defaultProps","createContextualCan","Getter","h","useAbility","context","process","env","NODE_ENV","React","useContext","Error","useState","rules","setRules","useEffect","event"],"sources":["../../src/Can.ts","../../src/factory.ts","../../src/hooks/useAbility.ts"],"sourcesContent":["import { Children, ReactNodeArray, PureComponent, Fragment, createElement } from 'react';\nimport {\n  Unsubscribe,\n  AbilityTuple,\n  SubjectType,\n  AnyAbility,\n  Generics,\n  Abilities,\n  IfString,\n} from '@casl/ability';\n\nconst noop = () => {};\nconst renderChildren = Fragment\n  ? (children?: ReactNodeArray) => {\n    if (!children) {\n      return null;\n    }\n\n    return children.length > 1\n      ? createElement(Fragment, null, ...children)\n      : Children.only(children);\n  }\n  : Children.only;\n\ntype AbilityCanProps<\n  T extends Abilities,\n  Else = IfString<T, { do: T } | { I: T }>\n> = T extends AbilityTuple\n  ? { do: T[0], on: T[1], field?: string } |\n  { I: T[0], a: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], an: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], this: Exclude<T[1], SubjectType>, field?: string }\n  : Else;\n\ninterface ExtraProps {\n  not?: boolean\n  passThrough?: boolean\n}\n\ninterface CanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability: T\n}\n\ninterface BoundCanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability?: T\n}\n\nexport type CanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & CanExtraProps<T>;\nexport type BoundCanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & BoundCanExtraProps<T>;\n\nexport class Can<\n  T extends AnyAbility,\n  IsBound extends boolean = false\n> extends PureComponent<IsBound extends true ? BoundCanProps<T> : CanProps<T>> {\n  private _isAllowed: boolean = false;\n  private _ability: T | null = null;\n  private _unsubscribeFromAbility: Unsubscribe = noop;\n\n  componentWillUnmount() {\n    this._unsubscribeFromAbility();\n  }\n\n  private _connectToAbility(ability?: T) {\n    if (ability === this._ability) {\n      return;\n    }\n\n    this._unsubscribeFromAbility();\n    this._ability = null;\n\n    if (ability) {\n      this._ability = ability;\n      this._unsubscribeFromAbility = ability.on('updated', () => this.forceUpdate());\n    }\n  }\n\n  get allowed() {\n    return this._isAllowed;\n  }\n\n  private _canRender(): boolean {\n    const props: any = this.props;\n    const subject = props.of || props.a || props.an || props.this || props.on;\n    const can = props.not ? 'cannot' : 'can';\n\n    return props.ability[can](props.I || props.do, subject, props.field);\n  }\n\n  render() {\n    this._connectToAbility(this.props.ability);\n    this._isAllowed = this._canRender();\n    return this.props.passThrough || this._isAllowed ? this._renderChildren() : null;\n  }\n\n  private _renderChildren() {\n    const { children, ability } = this.props;\n    const elements = typeof children === 'function'\n      ? children(this._isAllowed, ability)\n      : children;\n\n    return renderChildren(elements);\n  }\n}\n","import { createElement as h, ComponentClass, Consumer, StatelessComponent } from 'react';\nimport { AnyAbility } from '@casl/ability';\nimport { Can, BoundCanProps } from './Can';\n\ninterface BoundCanClass<T extends AnyAbility> extends ComponentClass<BoundCanProps<T>> {\n  new (props: BoundCanProps<T>, context?: any): Can<T, true>\n}\n\nexport function createCanBoundTo<T extends AnyAbility>(ability: T): BoundCanClass<T> {\n  return class extends Can<T, true> {\n    static defaultProps = { ability } as BoundCanClass<T>['defaultProps'];\n  };\n}\n\nexport function createContextualCan<T extends AnyAbility>(\n  Getter: Consumer<T>\n): StatelessComponent<BoundCanProps<T>> {\n  return (props: BoundCanProps<T>) => h(Getter, null, (ability: T) => h(Can, {\n    ability,\n    ...props,\n  } as any));\n}\n","import React from 'react';\nimport { AnyAbility } from '@casl/ability';\n\nexport function useAbility<T extends AnyAbility>(context: React.Context<T>): T {\n  if (process.env.NODE_ENV !== 'production' && typeof React.useContext !== 'function') {\n    /* istanbul ignore next */\n    throw new Error('You must use React >= 16.8 in order to use useAbility()');\n  }\n\n  const ability = React.useContext<T>(context);\n  const [rules, setRules] = React.useState<T['rules']>();\n\n  React.useEffect(() => ability.on('updated', (event) => {\n    if (event.rules !== rules) {\n      setRules(event.rules);\n    }\n  }), []);\n\n  return ability;\n}\n"]},"metadata":{},"sourceType":"module"}